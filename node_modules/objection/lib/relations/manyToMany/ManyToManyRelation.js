'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _getOwnPropertyDescriptor = require('babel-runtime/core-js/object/get-own-property-descriptor');

var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _desc, _value, _class;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _Relation2 = require('../Relation');

var _Relation3 = _interopRequireDefault(_Relation2);

var _inheritModel = require('../../model/inheritModel');

var _inheritModel2 = _interopRequireDefault(_inheritModel);

var _dbUtils = require('../../utils/dbUtils');

var _memoize = require('../../utils/decorators/memoize');

var _memoize2 = _interopRequireDefault(_memoize);

var _ManyToManyFindOperation = require('./ManyToManyFindOperation');

var _ManyToManyFindOperation2 = _interopRequireDefault(_ManyToManyFindOperation);

var _ManyToManyInsertOperation = require('./ManyToManyInsertOperation');

var _ManyToManyInsertOperation2 = _interopRequireDefault(_ManyToManyInsertOperation);

var _ManyToManyRelateOperation = require('./ManyToManyRelateOperation');

var _ManyToManyRelateOperation2 = _interopRequireDefault(_ManyToManyRelateOperation);

var _ManyToManyUnrelateOperation = require('./ManyToManyUnrelateOperation');

var _ManyToManyUnrelateOperation2 = _interopRequireDefault(_ManyToManyUnrelateOperation);

var _ManyToManyUnrelateSqliteOperation = require('./ManyToManyUnrelateSqliteOperation');

var _ManyToManyUnrelateSqliteOperation2 = _interopRequireDefault(_ManyToManyUnrelateSqliteOperation);

var _ManyToManyUpdateOperation = require('./ManyToManyUpdateOperation');

var _ManyToManyUpdateOperation2 = _interopRequireDefault(_ManyToManyUpdateOperation);

var _ManyToManyUpdateSqliteOperation = require('./ManyToManyUpdateSqliteOperation');

var _ManyToManyUpdateSqliteOperation2 = _interopRequireDefault(_ManyToManyUpdateSqliteOperation);

var _ManyToManyDeleteOperation = require('./ManyToManyDeleteOperation');

var _ManyToManyDeleteOperation2 = _interopRequireDefault(_ManyToManyDeleteOperation);

var _ManyToManyDeleteSqliteOperation = require('./ManyToManyDeleteSqliteOperation');

var _ManyToManyDeleteSqliteOperation2 = _interopRequireDefault(_ManyToManyDeleteSqliteOperation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

var sqliteBuiltInRowId = '_rowid_';

var ManyToManyRelation = (_class = function (_Relation) {
  (0, _inherits3.default)(ManyToManyRelation, _Relation);

  function ManyToManyRelation() {
    (0, _classCallCheck3.default)(this, ManyToManyRelation);
    return (0, _possibleConstructorReturn3.default)(this, _Relation.apply(this, arguments));
  }

  ManyToManyRelation.prototype.setMapping = function setMapping(mapping) {
    var retVal = _Relation.prototype.setMapping.call(this, mapping);

    // Avoid require loop and import here.
    var Model = require(__dirname + '/../../model/Model').default;

    if (!_lodash2.default.isObject(mapping.join.through)) {
      this.throwError('join must have the `through` that describes the join table.');
    }

    if (!mapping.join.through.from || !mapping.join.through.to) {
      this.throwError('join.through must be an object that describes the join table. For example: {from: "JoinTable.someId", to: "JoinTable.someOtherId"}');
    }

    var joinFrom = this.parseReference(mapping.join.from);
    var joinTableFrom = this.parseReference(mapping.join.through.from);
    var joinTableTo = this.parseReference(mapping.join.through.to);
    var joinTableExtra = mapping.join.through.extra || [];

    if (!joinTableFrom.table || _lodash2.default.isEmpty(joinTableFrom.columns)) {
      this.throwError('join.through.from must have format JoinTable.columnName. For example "JoinTable.someId" or in case of composite key ["JoinTable.a", "JoinTable.b"].');
    }

    if (!joinTableTo.table || _lodash2.default.isEmpty(joinTableTo.columns)) {
      this.throwError('join.through.to must have format JoinTable.columnName. For example "JoinTable.someId" or in case of composite key ["JoinTable.a", "JoinTable.b"].');
    }

    if (joinTableFrom.table !== joinTableTo.table) {
      this.throwError('join.through `from` and `to` must point to the same join table.');
    }

    this.joinTable = joinTableFrom.table;
    this.joinTableExtraCols = joinTableExtra;

    if (joinFrom.table === this.ownerModelClass.tableName) {
      this.joinTableOwnerCol = joinTableFrom.columns;
      this.joinTableRelatedCol = joinTableTo.columns;
    } else {
      this.joinTableRelatedCol = joinTableFrom.columns;
      this.joinTableOwnerCol = joinTableTo.columns;
    }

    if (mapping.join.through.modelClass) {
      this._joinTableModelClass = this.resolveModel(Model, mapping.join.through.modelClass, 'join.through.modelClass');
    } else {
      this._joinTableModelClass = (0, _inheritModel2.default)(Model);
      this._joinTableModelClass.tableName = this.joinTable;
      // We cannot know if the join table has a primary key. Therefore we set some
      // known column as the idColumn so that inserts will work.
      this._joinTableModelClass.idColumn = this.joinTableRelatedCol;
    }

    this.joinTableOwnerProp = this.propertyName(this.joinTableOwnerCol, this._joinTableModelClass);
    this.joinTableRelatedProp = this.propertyName(this.joinTableRelatedCol, this._joinTableModelClass);
    this.joinTableExtraProps = this.propertyName(this.joinTableExtraCols, this._joinTableModelClass);

    return retVal;
  };

  /**
   * @returns {Array.<string>}
   */


  ManyToManyRelation.prototype.fullJoinTableOwnerCol = function fullJoinTableOwnerCol() {
    var _this2 = this;

    return this.joinTableOwnerCol.map(function (col) {
      return _this2.joinTable + '.' + col;
    });
  };

  /**
   * @returns {Array.<string>}
   */


  ManyToManyRelation.prototype.fullJoinTableRelatedCol = function fullJoinTableRelatedCol() {
    var _this3 = this;

    return this.joinTableRelatedCol.map(function (col) {
      return _this3.joinTable + '.' + col;
    });
  };

  /**
   * @returns {Array.<string>}
   */


  ManyToManyRelation.prototype.fullJoinTableExtraCols = function fullJoinTableExtraCols() {
    var _this4 = this;

    return this.joinTableExtraCols.map(function (col) {
      return _this4.joinTable + '.' + col;
    });
  };

  /**
   * @returns {string}
   */


  ManyToManyRelation.prototype.joinTableAlias = function joinTableAlias() {
    return this.joinTable + '_rel_' + this.name;
  };

  /**
   * @returns {ManyToManyRelation}
   */


  ManyToManyRelation.prototype.bindKnex = function bindKnex(knex) {
    var bound = _Relation.prototype.bindKnex.call(this, knex);
    bound._joinTableModelClass = this._joinTableModelClass.bindKnex(knex);
    return bound;
  };

  /**
   * @returns {QueryBuilder}
   */


  ManyToManyRelation.prototype.findQuery = function findQuery(builder, opt) {
    var _this5 = this;

    builder.join(this.joinTable, function (join) {
      var fullRelatedCol = _this5.fullRelatedCol();
      var fullJoinTableRelatedCol = _this5.fullJoinTableRelatedCol();

      for (var i = 0, l = fullJoinTableRelatedCol.length; i < l; ++i) {
        join.on(fullJoinTableRelatedCol[i], fullRelatedCol[i]);
      }
    });

    if (opt.isColumnRef) {
      var fullJoinTableOwnerCol = this.fullJoinTableOwnerCol();

      for (var i = 0, l = fullJoinTableOwnerCol.length; i < l; ++i) {
        builder.whereRef(fullJoinTableOwnerCol[i], opt.ownerIds[i]);
      }
    } else {
      var hasIds = false;

      for (var _i = 0, _l = opt.ownerIds.length; _i < _l; ++_i) {
        var id = opt.ownerIds[_i];

        if (id) {
          hasIds = true;
          break;
        }
      }

      if (hasIds) {
        builder.whereInComposite(this.fullJoinTableOwnerCol(), opt.ownerIds);
      } else {
        builder.resolve([]);
      }
    }

    return builder.modify(this.modify);
  };

  /**
   * @returns {QueryBuilder}
   */


  ManyToManyRelation.prototype.join = function join(builder, opt) {
    opt = opt || {};

    opt.joinOperation = opt.joinOperation || 'join';
    opt.relatedTableAlias = opt.relatedTableAlias || this.relatedTableAlias();
    opt.relatedJoinSelectQuery = opt.relatedJoinSelectQuery || this.relatedModelClass.query().childQueryOf(builder);
    opt.relatedTable = opt.relatedTable || this.relatedModelClass.tableName;
    opt.ownerTable = opt.ownerTable || this.ownerModelClass.tableName;
    opt.joinTableAlias = opt.joinTableAlias || opt.relatedTableAlias + '_join';

    var joinTableAsAlias = this.joinTable + ' as ' + opt.joinTableAlias;
    var joinTableOwnerCol = this.joinTableOwnerCol.map(function (col) {
      return opt.joinTableAlias + '.' + col;
    });
    var joinTableRelatedCol = this.joinTableRelatedCol.map(function (col) {
      return opt.joinTableAlias + '.' + col;
    });

    var relatedCol = this.relatedCol.map(function (col) {
      return opt.relatedTableAlias + '.' + col;
    });
    var ownerCol = this.ownerCol.map(function (col) {
      return opt.ownerTable + '.' + col;
    });

    var relatedJoinSelectQuery = opt.relatedJoinSelectQuery.modify(this.modify).as(opt.relatedTableAlias);

    return builder[opt.joinOperation](joinTableAsAlias, function (join) {
      for (var i = 0, l = joinTableOwnerCol.length; i < l; ++i) {
        join.on(joinTableOwnerCol[i], ownerCol[i]);
      }
    })[opt.joinOperation](relatedJoinSelectQuery, function (join) {
      for (var i = 0, l = joinTableRelatedCol.length; i < l; ++i) {
        join.on(joinTableRelatedCol[i], relatedCol[i]);
      }
    });
  };

  ManyToManyRelation.prototype.find = function find(builder, owners) {
    return new _ManyToManyFindOperation2.default('find', {
      relation: this,
      owners: owners
    });
  };

  ManyToManyRelation.prototype.insert = function insert(builder, owner) {
    return new _ManyToManyInsertOperation2.default('insert', {
      relation: this,
      owner: owner
    });
  };

  ManyToManyRelation.prototype.update = function update(builder, owner) {
    if ((0, _dbUtils.isSqlite)(builder.knex())) {
      return new _ManyToManyUpdateSqliteOperation2.default('update', {
        relation: this,
        owner: owner
      });
    } else {
      return new _ManyToManyUpdateOperation2.default('update', {
        relation: this,
        owner: owner
      });
    }
  };

  ManyToManyRelation.prototype.patch = function patch(builder, owner) {
    if ((0, _dbUtils.isSqlite)(builder.knex())) {
      return new _ManyToManyUpdateSqliteOperation2.default('patch', {
        relation: this,
        owner: owner,
        modelOptions: { patch: true }
      });
    } else {
      return new _ManyToManyUpdateOperation2.default('patch', {
        relation: this,
        owner: owner,
        modelOptions: { patch: true }
      });
    }
  };

  ManyToManyRelation.prototype.delete = function _delete(builder, owner) {
    if ((0, _dbUtils.isSqlite)(builder.knex())) {
      return new _ManyToManyDeleteSqliteOperation2.default('delete', {
        relation: this,
        owner: owner
      });
    } else {
      return new _ManyToManyDeleteOperation2.default('delete', {
        relation: this,
        owner: owner
      });
    }
  };

  ManyToManyRelation.prototype.relate = function relate(builder, owner) {
    return new _ManyToManyRelateOperation2.default('relate', {
      relation: this,
      owner: owner
    });
  };

  ManyToManyRelation.prototype.unrelate = function unrelate(builder, owner) {
    if ((0, _dbUtils.isSqlite)(builder.knex())) {
      return new _ManyToManyUnrelateSqliteOperation2.default('unrelate', {
        relation: this,
        owner: owner
      });
    } else {
      return new _ManyToManyUnrelateOperation2.default('unrelate', {
        relation: this,
        owner: owner
      });
    }
  };

  ManyToManyRelation.prototype.selectForModify = function selectForModify(builder, owner) {
    var ownerId = owner.$values(this.ownerProp);

    var idQuery = this.joinTableModelClass(builder.knex()).query().childQueryOf(builder).select(this.fullJoinTableRelatedCol()).whereComposite(this.fullJoinTableOwnerCol(), ownerId);

    return builder.whereInComposite(this.fullRelatedCol(), idQuery);
  };

  ManyToManyRelation.prototype.selectForModifySqlite = function selectForModifySqlite(builder, owner) {
    var _this6 = this;

    var relatedTable = this.relatedModelClass.tableName;
    var relatedTableAlias = this.relatedTableAlias();
    var relatedTableAsAlias = relatedTable + ' as ' + relatedTableAlias;
    var relatedTableAliasRowId = relatedTableAlias + '.' + sqliteBuiltInRowId;
    var relatedTableRowId = relatedTable + '.' + sqliteBuiltInRowId;

    var selectRelatedQuery = this.joinTableModelClass(builder.knex()).query().childQueryOf(builder).select(relatedTableAliasRowId).whereComposite(this.fullJoinTableOwnerCol(), owner.$values(this.ownerProp)).join(relatedTableAsAlias, function (join) {
      var fullJoinTableRelatedCols = _this6.fullJoinTableRelatedCol();
      var fullRelatedCol = _this6.fullRelatedCol();

      for (var i = 0, l = fullJoinTableRelatedCols.length; i < l; ++i) {
        join.on(fullJoinTableRelatedCols[i], fullRelatedCol[i]);
      }
    });

    return builder.whereInComposite(relatedTableRowId, selectRelatedQuery);
  };

  ManyToManyRelation.prototype.createJoinModels = function createJoinModels(ownerId, related) {
    var joinModels = new Array(related.length);

    for (var i = 0, lr = related.length; i < lr; ++i) {
      var rel = related[i];
      var joinModel = {};

      for (var j = 0, lp = this.joinTableOwnerProp.length; j < lp; ++j) {
        joinModel[this.joinTableOwnerProp[j]] = ownerId[j];
      }

      for (var _j = 0, _lp = this.joinTableRelatedProp.length; _j < _lp; ++_j) {
        joinModel[this.joinTableRelatedProp[_j]] = rel[this.relatedProp[_j]];
      }

      for (var _j2 = 0, _lp2 = this.joinTableExtraProps.length; _j2 < _lp2; ++_j2) {
        var prop = this.joinTableExtraProps[_j2];
        var extraValue = rel[prop];

        if (!_lodash2.default.isUndefined(extraValue)) {
          joinModel[prop] = extraValue;
        }
      }

      joinModels[i] = joinModel;
    }

    return joinModels;
  };

  ManyToManyRelation.prototype.omitExtraProps = function omitExtraProps(models) {
    if (!_lodash2.default.isEmpty(this.joinTableExtraProps)) {
      for (var i = 0, l = models.length; i < l; ++i) {
        models[i].$omitFromDatabaseJson(this.joinTableExtraProps);
      }
    }
  };

  return ManyToManyRelation;
}(_Relation3.default), (_applyDecoratedDescriptor(_class.prototype, 'fullJoinTableOwnerCol', [_memoize2.default], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, 'fullJoinTableOwnerCol'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'fullJoinTableRelatedCol', [_memoize2.default], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, 'fullJoinTableRelatedCol'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'fullJoinTableExtraCols', [_memoize2.default], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, 'fullJoinTableExtraCols'), _class.prototype)), _class);
exports.default = ManyToManyRelation;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk1hbnlUb01hbnlSZWxhdGlvbi5qcyJdLCJuYW1lcyI6WyJzcWxpdGVCdWlsdEluUm93SWQiLCJNYW55VG9NYW55UmVsYXRpb24iLCJzZXRNYXBwaW5nIiwibWFwcGluZyIsInJldFZhbCIsIk1vZGVsIiwicmVxdWlyZSIsIl9fZGlybmFtZSIsImRlZmF1bHQiLCJpc09iamVjdCIsImpvaW4iLCJ0aHJvdWdoIiwidGhyb3dFcnJvciIsImZyb20iLCJ0byIsImpvaW5Gcm9tIiwicGFyc2VSZWZlcmVuY2UiLCJqb2luVGFibGVGcm9tIiwiam9pblRhYmxlVG8iLCJqb2luVGFibGVFeHRyYSIsImV4dHJhIiwidGFibGUiLCJpc0VtcHR5IiwiY29sdW1ucyIsImpvaW5UYWJsZSIsImpvaW5UYWJsZUV4dHJhQ29scyIsIm93bmVyTW9kZWxDbGFzcyIsInRhYmxlTmFtZSIsImpvaW5UYWJsZU93bmVyQ29sIiwiam9pblRhYmxlUmVsYXRlZENvbCIsIm1vZGVsQ2xhc3MiLCJfam9pblRhYmxlTW9kZWxDbGFzcyIsInJlc29sdmVNb2RlbCIsImlkQ29sdW1uIiwiam9pblRhYmxlT3duZXJQcm9wIiwicHJvcGVydHlOYW1lIiwiam9pblRhYmxlUmVsYXRlZFByb3AiLCJqb2luVGFibGVFeHRyYVByb3BzIiwiZnVsbEpvaW5UYWJsZU93bmVyQ29sIiwibWFwIiwiY29sIiwiZnVsbEpvaW5UYWJsZVJlbGF0ZWRDb2wiLCJmdWxsSm9pblRhYmxlRXh0cmFDb2xzIiwiam9pblRhYmxlQWxpYXMiLCJuYW1lIiwiYmluZEtuZXgiLCJrbmV4IiwiYm91bmQiLCJmaW5kUXVlcnkiLCJidWlsZGVyIiwib3B0IiwiZnVsbFJlbGF0ZWRDb2wiLCJpIiwibCIsImxlbmd0aCIsIm9uIiwiaXNDb2x1bW5SZWYiLCJ3aGVyZVJlZiIsIm93bmVySWRzIiwiaGFzSWRzIiwiaWQiLCJ3aGVyZUluQ29tcG9zaXRlIiwicmVzb2x2ZSIsIm1vZGlmeSIsImpvaW5PcGVyYXRpb24iLCJyZWxhdGVkVGFibGVBbGlhcyIsInJlbGF0ZWRKb2luU2VsZWN0UXVlcnkiLCJyZWxhdGVkTW9kZWxDbGFzcyIsInF1ZXJ5IiwiY2hpbGRRdWVyeU9mIiwicmVsYXRlZFRhYmxlIiwib3duZXJUYWJsZSIsImpvaW5UYWJsZUFzQWxpYXMiLCJyZWxhdGVkQ29sIiwib3duZXJDb2wiLCJhcyIsImZpbmQiLCJvd25lcnMiLCJyZWxhdGlvbiIsImluc2VydCIsIm93bmVyIiwidXBkYXRlIiwicGF0Y2giLCJtb2RlbE9wdGlvbnMiLCJkZWxldGUiLCJyZWxhdGUiLCJ1bnJlbGF0ZSIsInNlbGVjdEZvck1vZGlmeSIsIm93bmVySWQiLCIkdmFsdWVzIiwib3duZXJQcm9wIiwiaWRRdWVyeSIsImpvaW5UYWJsZU1vZGVsQ2xhc3MiLCJzZWxlY3QiLCJ3aGVyZUNvbXBvc2l0ZSIsInNlbGVjdEZvck1vZGlmeVNxbGl0ZSIsInJlbGF0ZWRUYWJsZUFzQWxpYXMiLCJyZWxhdGVkVGFibGVBbGlhc1Jvd0lkIiwicmVsYXRlZFRhYmxlUm93SWQiLCJzZWxlY3RSZWxhdGVkUXVlcnkiLCJmdWxsSm9pblRhYmxlUmVsYXRlZENvbHMiLCJjcmVhdGVKb2luTW9kZWxzIiwicmVsYXRlZCIsImpvaW5Nb2RlbHMiLCJBcnJheSIsImxyIiwicmVsIiwiam9pbk1vZGVsIiwiaiIsImxwIiwicmVsYXRlZFByb3AiLCJwcm9wIiwiZXh0cmFWYWx1ZSIsImlzVW5kZWZpbmVkIiwib21pdEV4dHJhUHJvcHMiLCJtb2RlbHMiLCIkb21pdEZyb21EYXRhYmFzZUpzb24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQSxJQUFNQSxxQkFBcUIsU0FBM0I7O0lBRXFCQyxr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LGtCIiwiZmlsZSI6Ik1hbnlUb01hbnlSZWxhdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgUmVsYXRpb24gZnJvbSAnLi4vUmVsYXRpb24nO1xuaW1wb3J0IGluaGVyaXRNb2RlbCBmcm9tICcuLi8uLi9tb2RlbC9pbmhlcml0TW9kZWwnO1xuaW1wb3J0IHtpc1NxbGl0ZX0gZnJvbSAnLi4vLi4vdXRpbHMvZGJVdGlscyc7XG5pbXBvcnQgbWVtb2l6ZSBmcm9tICcuLi8uLi91dGlscy9kZWNvcmF0b3JzL21lbW9pemUnO1xuXG5pbXBvcnQgTWFueVRvTWFueUZpbmRPcGVyYXRpb24gZnJvbSAnLi9NYW55VG9NYW55RmluZE9wZXJhdGlvbic7XG5pbXBvcnQgTWFueVRvTWFueUluc2VydE9wZXJhdGlvbiBmcm9tICcuL01hbnlUb01hbnlJbnNlcnRPcGVyYXRpb24nO1xuaW1wb3J0IE1hbnlUb01hbnlSZWxhdGVPcGVyYXRpb24gZnJvbSAnLi9NYW55VG9NYW55UmVsYXRlT3BlcmF0aW9uJztcbmltcG9ydCBNYW55VG9NYW55VW5yZWxhdGVPcGVyYXRpb24gZnJvbSAnLi9NYW55VG9NYW55VW5yZWxhdGVPcGVyYXRpb24nO1xuaW1wb3J0IE1hbnlUb01hbnlVbnJlbGF0ZVNxbGl0ZU9wZXJhdGlvbiBmcm9tICcuL01hbnlUb01hbnlVbnJlbGF0ZVNxbGl0ZU9wZXJhdGlvbic7XG5pbXBvcnQgTWFueVRvTWFueVVwZGF0ZU9wZXJhdGlvbiBmcm9tICcuL01hbnlUb01hbnlVcGRhdGVPcGVyYXRpb24nO1xuaW1wb3J0IE1hbnlUb01hbnlVcGRhdGVTcWxpdGVPcGVyYXRpb24gZnJvbSAnLi9NYW55VG9NYW55VXBkYXRlU3FsaXRlT3BlcmF0aW9uJztcbmltcG9ydCBNYW55VG9NYW55RGVsZXRlT3BlcmF0aW9uIGZyb20gJy4vTWFueVRvTWFueURlbGV0ZU9wZXJhdGlvbic7XG5pbXBvcnQgTWFueVRvTWFueURlbGV0ZVNxbGl0ZU9wZXJhdGlvbiBmcm9tICcuL01hbnlUb01hbnlEZWxldGVTcWxpdGVPcGVyYXRpb24nO1xuXG5jb25zdCBzcWxpdGVCdWlsdEluUm93SWQgPSAnX3Jvd2lkXyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hbnlUb01hbnlSZWxhdGlvbiBleHRlbmRzIFJlbGF0aW9uIHtcblxuICBzZXRNYXBwaW5nKG1hcHBpbmcpIHtcbiAgICBsZXQgcmV0VmFsID0gc3VwZXIuc2V0TWFwcGluZyhtYXBwaW5nKTtcblxuICAgIC8vIEF2b2lkIHJlcXVpcmUgbG9vcCBhbmQgaW1wb3J0IGhlcmUuXG4gICAgbGV0IE1vZGVsID0gcmVxdWlyZShfX2Rpcm5hbWUgKyAnLy4uLy4uL21vZGVsL01vZGVsJykuZGVmYXVsdDtcblxuICAgIGlmICghXy5pc09iamVjdChtYXBwaW5nLmpvaW4udGhyb3VnaCkpIHtcbiAgICAgIHRoaXMudGhyb3dFcnJvcignam9pbiBtdXN0IGhhdmUgdGhlIGB0aHJvdWdoYCB0aGF0IGRlc2NyaWJlcyB0aGUgam9pbiB0YWJsZS4nKTtcbiAgICB9XG5cbiAgICBpZiAoIW1hcHBpbmcuam9pbi50aHJvdWdoLmZyb20gfHwgIW1hcHBpbmcuam9pbi50aHJvdWdoLnRvKSB7XG4gICAgICB0aGlzLnRocm93RXJyb3IoJ2pvaW4udGhyb3VnaCBtdXN0IGJlIGFuIG9iamVjdCB0aGF0IGRlc2NyaWJlcyB0aGUgam9pbiB0YWJsZS4gRm9yIGV4YW1wbGU6IHtmcm9tOiBcIkpvaW5UYWJsZS5zb21lSWRcIiwgdG86IFwiSm9pblRhYmxlLnNvbWVPdGhlcklkXCJ9Jyk7XG4gICAgfVxuXG4gICAgbGV0IGpvaW5Gcm9tID0gdGhpcy5wYXJzZVJlZmVyZW5jZShtYXBwaW5nLmpvaW4uZnJvbSk7XG4gICAgbGV0IGpvaW5UYWJsZUZyb20gPSB0aGlzLnBhcnNlUmVmZXJlbmNlKG1hcHBpbmcuam9pbi50aHJvdWdoLmZyb20pO1xuICAgIGxldCBqb2luVGFibGVUbyA9IHRoaXMucGFyc2VSZWZlcmVuY2UobWFwcGluZy5qb2luLnRocm91Z2gudG8pO1xuICAgIGxldCBqb2luVGFibGVFeHRyYSA9IG1hcHBpbmcuam9pbi50aHJvdWdoLmV4dHJhIHx8IFtdO1xuXG4gICAgaWYgKCFqb2luVGFibGVGcm9tLnRhYmxlIHx8IF8uaXNFbXB0eShqb2luVGFibGVGcm9tLmNvbHVtbnMpKSB7XG4gICAgICB0aGlzLnRocm93RXJyb3IoJ2pvaW4udGhyb3VnaC5mcm9tIG11c3QgaGF2ZSBmb3JtYXQgSm9pblRhYmxlLmNvbHVtbk5hbWUuIEZvciBleGFtcGxlIFwiSm9pblRhYmxlLnNvbWVJZFwiIG9yIGluIGNhc2Ugb2YgY29tcG9zaXRlIGtleSBbXCJKb2luVGFibGUuYVwiLCBcIkpvaW5UYWJsZS5iXCJdLicpO1xuICAgIH1cblxuICAgIGlmICgham9pblRhYmxlVG8udGFibGUgfHwgXy5pc0VtcHR5KGpvaW5UYWJsZVRvLmNvbHVtbnMpKSB7XG4gICAgICB0aGlzLnRocm93RXJyb3IoJ2pvaW4udGhyb3VnaC50byBtdXN0IGhhdmUgZm9ybWF0IEpvaW5UYWJsZS5jb2x1bW5OYW1lLiBGb3IgZXhhbXBsZSBcIkpvaW5UYWJsZS5zb21lSWRcIiBvciBpbiBjYXNlIG9mIGNvbXBvc2l0ZSBrZXkgW1wiSm9pblRhYmxlLmFcIiwgXCJKb2luVGFibGUuYlwiXS4nKTtcbiAgICB9XG5cbiAgICBpZiAoam9pblRhYmxlRnJvbS50YWJsZSAhPT0gam9pblRhYmxlVG8udGFibGUpIHtcbiAgICAgIHRoaXMudGhyb3dFcnJvcignam9pbi50aHJvdWdoIGBmcm9tYCBhbmQgYHRvYCBtdXN0IHBvaW50IHRvIHRoZSBzYW1lIGpvaW4gdGFibGUuJyk7XG4gICAgfVxuXG4gICAgdGhpcy5qb2luVGFibGUgPSBqb2luVGFibGVGcm9tLnRhYmxlO1xuICAgIHRoaXMuam9pblRhYmxlRXh0cmFDb2xzID0gam9pblRhYmxlRXh0cmE7XG5cbiAgICBpZiAoam9pbkZyb20udGFibGUgPT09IHRoaXMub3duZXJNb2RlbENsYXNzLnRhYmxlTmFtZSkge1xuICAgICAgdGhpcy5qb2luVGFibGVPd25lckNvbCA9IGpvaW5UYWJsZUZyb20uY29sdW1ucztcbiAgICAgIHRoaXMuam9pblRhYmxlUmVsYXRlZENvbCA9IGpvaW5UYWJsZVRvLmNvbHVtbnM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuam9pblRhYmxlUmVsYXRlZENvbCA9IGpvaW5UYWJsZUZyb20uY29sdW1ucztcbiAgICAgIHRoaXMuam9pblRhYmxlT3duZXJDb2wgPSBqb2luVGFibGVUby5jb2x1bW5zO1xuICAgIH1cblxuICAgIGlmIChtYXBwaW5nLmpvaW4udGhyb3VnaC5tb2RlbENsYXNzKSB7XG4gICAgICB0aGlzLl9qb2luVGFibGVNb2RlbENsYXNzID0gdGhpcy5yZXNvbHZlTW9kZWwoTW9kZWwsIG1hcHBpbmcuam9pbi50aHJvdWdoLm1vZGVsQ2xhc3MsICdqb2luLnRocm91Z2gubW9kZWxDbGFzcycpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9qb2luVGFibGVNb2RlbENsYXNzID0gaW5oZXJpdE1vZGVsKE1vZGVsKTtcbiAgICAgIHRoaXMuX2pvaW5UYWJsZU1vZGVsQ2xhc3MudGFibGVOYW1lID0gdGhpcy5qb2luVGFibGU7XG4gICAgICAvLyBXZSBjYW5ub3Qga25vdyBpZiB0aGUgam9pbiB0YWJsZSBoYXMgYSBwcmltYXJ5IGtleS4gVGhlcmVmb3JlIHdlIHNldCBzb21lXG4gICAgICAvLyBrbm93biBjb2x1bW4gYXMgdGhlIGlkQ29sdW1uIHNvIHRoYXQgaW5zZXJ0cyB3aWxsIHdvcmsuXG4gICAgICB0aGlzLl9qb2luVGFibGVNb2RlbENsYXNzLmlkQ29sdW1uID0gdGhpcy5qb2luVGFibGVSZWxhdGVkQ29sO1xuICAgIH1cblxuICAgIHRoaXMuam9pblRhYmxlT3duZXJQcm9wID0gdGhpcy5wcm9wZXJ0eU5hbWUodGhpcy5qb2luVGFibGVPd25lckNvbCwgdGhpcy5fam9pblRhYmxlTW9kZWxDbGFzcyk7XG4gICAgdGhpcy5qb2luVGFibGVSZWxhdGVkUHJvcCA9IHRoaXMucHJvcGVydHlOYW1lKHRoaXMuam9pblRhYmxlUmVsYXRlZENvbCwgdGhpcy5fam9pblRhYmxlTW9kZWxDbGFzcyk7XG4gICAgdGhpcy5qb2luVGFibGVFeHRyYVByb3BzID0gdGhpcy5wcm9wZXJ0eU5hbWUodGhpcy5qb2luVGFibGVFeHRyYUNvbHMsIHRoaXMuX2pvaW5UYWJsZU1vZGVsQ2xhc3MpO1xuXG4gICAgcmV0dXJuIHJldFZhbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7QXJyYXkuPHN0cmluZz59XG4gICAqL1xuICBAbWVtb2l6ZVxuICBmdWxsSm9pblRhYmxlT3duZXJDb2woKSB7XG4gICAgcmV0dXJuIHRoaXMuam9pblRhYmxlT3duZXJDb2wubWFwKGNvbCA9PiB0aGlzLmpvaW5UYWJsZSArICcuJyArIGNvbCk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge0FycmF5LjxzdHJpbmc+fVxuICAgKi9cbiAgQG1lbW9pemVcbiAgZnVsbEpvaW5UYWJsZVJlbGF0ZWRDb2woKSB7XG4gICAgcmV0dXJuIHRoaXMuam9pblRhYmxlUmVsYXRlZENvbC5tYXAoY29sID0+IHRoaXMuam9pblRhYmxlICsgJy4nICsgY29sKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7QXJyYXkuPHN0cmluZz59XG4gICAqL1xuICBAbWVtb2l6ZVxuICBmdWxsSm9pblRhYmxlRXh0cmFDb2xzKCkge1xuICAgIHJldHVybiB0aGlzLmpvaW5UYWJsZUV4dHJhQ29scy5tYXAoY29sID0+IHRoaXMuam9pblRhYmxlICsgJy4nICsgY29sKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgam9pblRhYmxlQWxpYXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuam9pblRhYmxlICsgJ19yZWxfJyArIHRoaXMubmFtZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7TWFueVRvTWFueVJlbGF0aW9ufVxuICAgKi9cbiAgYmluZEtuZXgoa25leCkge1xuICAgIGxldCBib3VuZCA9IHN1cGVyLmJpbmRLbmV4KGtuZXgpO1xuICAgIGJvdW5kLl9qb2luVGFibGVNb2RlbENsYXNzID0gdGhpcy5fam9pblRhYmxlTW9kZWxDbGFzcy5iaW5kS25leChrbmV4KTtcbiAgICByZXR1cm4gYm91bmQ7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge1F1ZXJ5QnVpbGRlcn1cbiAgICovXG4gIGZpbmRRdWVyeShidWlsZGVyLCBvcHQpIHtcbiAgICBidWlsZGVyLmpvaW4odGhpcy5qb2luVGFibGUsIGpvaW4gPT4ge1xuICAgICAgY29uc3QgZnVsbFJlbGF0ZWRDb2wgPSB0aGlzLmZ1bGxSZWxhdGVkQ29sKCk7XG4gICAgICBjb25zdCBmdWxsSm9pblRhYmxlUmVsYXRlZENvbCA9IHRoaXMuZnVsbEpvaW5UYWJsZVJlbGF0ZWRDb2woKTtcblxuICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBmdWxsSm9pblRhYmxlUmVsYXRlZENvbC5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgam9pbi5vbihmdWxsSm9pblRhYmxlUmVsYXRlZENvbFtpXSwgZnVsbFJlbGF0ZWRDb2xbaV0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKG9wdC5pc0NvbHVtblJlZikge1xuICAgICAgY29uc3QgZnVsbEpvaW5UYWJsZU93bmVyQ29sID0gdGhpcy5mdWxsSm9pblRhYmxlT3duZXJDb2woKTtcblxuICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBmdWxsSm9pblRhYmxlT3duZXJDb2wubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgIGJ1aWxkZXIud2hlcmVSZWYoZnVsbEpvaW5UYWJsZU93bmVyQ29sW2ldLCBvcHQub3duZXJJZHNbaV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgaGFzSWRzID0gZmFsc2U7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gb3B0Lm93bmVySWRzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICBjb25zdCBpZCA9IG9wdC5vd25lcklkc1tpXTtcblxuICAgICAgICBpZiAoaWQpIHtcbiAgICAgICAgICBoYXNJZHMgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChoYXNJZHMpIHtcbiAgICAgICAgYnVpbGRlci53aGVyZUluQ29tcG9zaXRlKHRoaXMuZnVsbEpvaW5UYWJsZU93bmVyQ29sKCksIG9wdC5vd25lcklkcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBidWlsZGVyLnJlc29sdmUoW10pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBidWlsZGVyLm1vZGlmeSh0aGlzLm1vZGlmeSk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge1F1ZXJ5QnVpbGRlcn1cbiAgICovXG4gIGpvaW4oYnVpbGRlciwgb3B0KSB7XG4gICAgb3B0ID0gb3B0IHx8IHt9O1xuXG4gICAgb3B0LmpvaW5PcGVyYXRpb24gPSBvcHQuam9pbk9wZXJhdGlvbiB8fCAnam9pbic7XG4gICAgb3B0LnJlbGF0ZWRUYWJsZUFsaWFzID0gb3B0LnJlbGF0ZWRUYWJsZUFsaWFzIHx8IHRoaXMucmVsYXRlZFRhYmxlQWxpYXMoKTtcbiAgICBvcHQucmVsYXRlZEpvaW5TZWxlY3RRdWVyeSA9IG9wdC5yZWxhdGVkSm9pblNlbGVjdFF1ZXJ5IHx8IHRoaXMucmVsYXRlZE1vZGVsQ2xhc3MucXVlcnkoKS5jaGlsZFF1ZXJ5T2YoYnVpbGRlcik7XG4gICAgb3B0LnJlbGF0ZWRUYWJsZSA9IG9wdC5yZWxhdGVkVGFibGUgfHwgdGhpcy5yZWxhdGVkTW9kZWxDbGFzcy50YWJsZU5hbWU7XG4gICAgb3B0Lm93bmVyVGFibGUgPSBvcHQub3duZXJUYWJsZSB8fCB0aGlzLm93bmVyTW9kZWxDbGFzcy50YWJsZU5hbWU7XG4gICAgb3B0LmpvaW5UYWJsZUFsaWFzID0gb3B0LmpvaW5UYWJsZUFsaWFzIHx8IGAke29wdC5yZWxhdGVkVGFibGVBbGlhc31fam9pbmA7XG5cbiAgICBjb25zdCBqb2luVGFibGVBc0FsaWFzID0gYCR7dGhpcy5qb2luVGFibGV9IGFzICR7b3B0LmpvaW5UYWJsZUFsaWFzfWA7XG4gICAgY29uc3Qgam9pblRhYmxlT3duZXJDb2wgPSB0aGlzLmpvaW5UYWJsZU93bmVyQ29sLm1hcChjb2wgPT4gYCR7b3B0LmpvaW5UYWJsZUFsaWFzfS4ke2NvbH1gKTtcbiAgICBjb25zdCBqb2luVGFibGVSZWxhdGVkQ29sID0gdGhpcy5qb2luVGFibGVSZWxhdGVkQ29sLm1hcChjb2wgPT4gYCR7b3B0LmpvaW5UYWJsZUFsaWFzfS4ke2NvbH1gKTtcblxuICAgIGNvbnN0IHJlbGF0ZWRDb2wgPSB0aGlzLnJlbGF0ZWRDb2wubWFwKGNvbCA9PiBgJHtvcHQucmVsYXRlZFRhYmxlQWxpYXN9LiR7Y29sfWApO1xuICAgIGNvbnN0IG93bmVyQ29sID0gdGhpcy5vd25lckNvbC5tYXAoY29sID0+IGAke29wdC5vd25lclRhYmxlfS4ke2NvbH1gKTtcblxuICAgIGNvbnN0IHJlbGF0ZWRKb2luU2VsZWN0UXVlcnkgPSBvcHQucmVsYXRlZEpvaW5TZWxlY3RRdWVyeVxuICAgICAgLm1vZGlmeSh0aGlzLm1vZGlmeSlcbiAgICAgIC5hcyhvcHQucmVsYXRlZFRhYmxlQWxpYXMpO1xuXG4gICAgcmV0dXJuIGJ1aWxkZXJcbiAgICAgIFtvcHQuam9pbk9wZXJhdGlvbl0oam9pblRhYmxlQXNBbGlhcywgam9pbiA9PiB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gam9pblRhYmxlT3duZXJDb2wubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgam9pbi5vbihqb2luVGFibGVPd25lckNvbFtpXSwgb3duZXJDb2xbaV0pO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgW29wdC5qb2luT3BlcmF0aW9uXShyZWxhdGVkSm9pblNlbGVjdFF1ZXJ5LCBqb2luID0+IHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBqb2luVGFibGVSZWxhdGVkQ29sLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgIGpvaW4ub24oam9pblRhYmxlUmVsYXRlZENvbFtpXSwgcmVsYXRlZENvbFtpXSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICB9XG5cbiAgZmluZChidWlsZGVyLCBvd25lcnMpIHtcbiAgICByZXR1cm4gbmV3IE1hbnlUb01hbnlGaW5kT3BlcmF0aW9uKCdmaW5kJywge1xuICAgICAgcmVsYXRpb246IHRoaXMsXG4gICAgICBvd25lcnM6IG93bmVyc1xuICAgIH0pO1xuICB9XG5cbiAgaW5zZXJ0KGJ1aWxkZXIsIG93bmVyKSB7XG4gICAgcmV0dXJuIG5ldyBNYW55VG9NYW55SW5zZXJ0T3BlcmF0aW9uKCdpbnNlcnQnLCB7XG4gICAgICByZWxhdGlvbjogdGhpcyxcbiAgICAgIG93bmVyOiBvd25lclxuICAgIH0pO1xuICB9XG5cbiAgdXBkYXRlKGJ1aWxkZXIsIG93bmVyKSB7XG4gICAgaWYgKGlzU3FsaXRlKGJ1aWxkZXIua25leCgpKSkge1xuICAgICAgcmV0dXJuIG5ldyBNYW55VG9NYW55VXBkYXRlU3FsaXRlT3BlcmF0aW9uKCd1cGRhdGUnLCB7XG4gICAgICAgIHJlbGF0aW9uOiB0aGlzLFxuICAgICAgICBvd25lcjogb3duZXJcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IE1hbnlUb01hbnlVcGRhdGVPcGVyYXRpb24oJ3VwZGF0ZScsIHtcbiAgICAgICAgcmVsYXRpb246IHRoaXMsXG4gICAgICAgIG93bmVyOiBvd25lclxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcGF0Y2goYnVpbGRlciwgb3duZXIpIHtcbiAgICBpZiAoaXNTcWxpdGUoYnVpbGRlci5rbmV4KCkpKSB7XG4gICAgICByZXR1cm4gbmV3IE1hbnlUb01hbnlVcGRhdGVTcWxpdGVPcGVyYXRpb24oJ3BhdGNoJywge1xuICAgICAgICByZWxhdGlvbjogdGhpcyxcbiAgICAgICAgb3duZXI6IG93bmVyLFxuICAgICAgICBtb2RlbE9wdGlvbnM6IHtwYXRjaDogdHJ1ZX1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IE1hbnlUb01hbnlVcGRhdGVPcGVyYXRpb24oJ3BhdGNoJywge1xuICAgICAgICByZWxhdGlvbjogdGhpcyxcbiAgICAgICAgb3duZXI6IG93bmVyLFxuICAgICAgICBtb2RlbE9wdGlvbnM6IHtwYXRjaDogdHJ1ZX1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGRlbGV0ZShidWlsZGVyLCBvd25lcikge1xuICAgIGlmIChpc1NxbGl0ZShidWlsZGVyLmtuZXgoKSkpIHtcbiAgICAgIHJldHVybiBuZXcgTWFueVRvTWFueURlbGV0ZVNxbGl0ZU9wZXJhdGlvbignZGVsZXRlJywge1xuICAgICAgICByZWxhdGlvbjogdGhpcyxcbiAgICAgICAgb3duZXI6IG93bmVyXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBNYW55VG9NYW55RGVsZXRlT3BlcmF0aW9uKCdkZWxldGUnLCB7XG4gICAgICAgIHJlbGF0aW9uOiB0aGlzLFxuICAgICAgICBvd25lcjogb3duZXJcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJlbGF0ZShidWlsZGVyLCBvd25lcikge1xuICAgIHJldHVybiBuZXcgTWFueVRvTWFueVJlbGF0ZU9wZXJhdGlvbigncmVsYXRlJywge1xuICAgICAgcmVsYXRpb246IHRoaXMsXG4gICAgICBvd25lcjogb3duZXJcbiAgICB9KTtcbiAgfVxuXG4gIHVucmVsYXRlKGJ1aWxkZXIsIG93bmVyKSB7XG4gICAgaWYgKGlzU3FsaXRlKGJ1aWxkZXIua25leCgpKSkge1xuICAgICAgcmV0dXJuIG5ldyBNYW55VG9NYW55VW5yZWxhdGVTcWxpdGVPcGVyYXRpb24oJ3VucmVsYXRlJywge1xuICAgICAgICByZWxhdGlvbjogdGhpcyxcbiAgICAgICAgb3duZXI6IG93bmVyXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBNYW55VG9NYW55VW5yZWxhdGVPcGVyYXRpb24oJ3VucmVsYXRlJywge1xuICAgICAgICByZWxhdGlvbjogdGhpcyxcbiAgICAgICAgb3duZXI6IG93bmVyXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBzZWxlY3RGb3JNb2RpZnkoYnVpbGRlciwgb3duZXIpIHtcbiAgICBsZXQgb3duZXJJZCA9IG93bmVyLiR2YWx1ZXModGhpcy5vd25lclByb3ApO1xuXG4gICAgbGV0IGlkUXVlcnkgPSB0aGlzLmpvaW5UYWJsZU1vZGVsQ2xhc3MoYnVpbGRlci5rbmV4KCkpXG4gICAgICAucXVlcnkoKVxuICAgICAgLmNoaWxkUXVlcnlPZihidWlsZGVyKVxuICAgICAgLnNlbGVjdCh0aGlzLmZ1bGxKb2luVGFibGVSZWxhdGVkQ29sKCkpXG4gICAgICAud2hlcmVDb21wb3NpdGUodGhpcy5mdWxsSm9pblRhYmxlT3duZXJDb2woKSwgb3duZXJJZCk7XG5cbiAgICByZXR1cm4gYnVpbGRlci53aGVyZUluQ29tcG9zaXRlKHRoaXMuZnVsbFJlbGF0ZWRDb2woKSwgaWRRdWVyeSk7XG4gIH1cblxuICBzZWxlY3RGb3JNb2RpZnlTcWxpdGUoYnVpbGRlciwgb3duZXIpIHtcbiAgICBjb25zdCByZWxhdGVkVGFibGUgPSB0aGlzLnJlbGF0ZWRNb2RlbENsYXNzLnRhYmxlTmFtZTtcbiAgICBjb25zdCByZWxhdGVkVGFibGVBbGlhcyA9IHRoaXMucmVsYXRlZFRhYmxlQWxpYXMoKTtcbiAgICBjb25zdCByZWxhdGVkVGFibGVBc0FsaWFzID0gcmVsYXRlZFRhYmxlICsgJyBhcyAnICsgcmVsYXRlZFRhYmxlQWxpYXM7XG4gICAgY29uc3QgcmVsYXRlZFRhYmxlQWxpYXNSb3dJZCA9IHJlbGF0ZWRUYWJsZUFsaWFzICsgJy4nICsgc3FsaXRlQnVpbHRJblJvd0lkO1xuICAgIGNvbnN0IHJlbGF0ZWRUYWJsZVJvd0lkID0gcmVsYXRlZFRhYmxlICsgJy4nICsgc3FsaXRlQnVpbHRJblJvd0lkO1xuXG4gICAgY29uc3Qgc2VsZWN0UmVsYXRlZFF1ZXJ5ID0gdGhpcy5qb2luVGFibGVNb2RlbENsYXNzKGJ1aWxkZXIua25leCgpKVxuICAgICAgLnF1ZXJ5KClcbiAgICAgIC5jaGlsZFF1ZXJ5T2YoYnVpbGRlcilcbiAgICAgIC5zZWxlY3QocmVsYXRlZFRhYmxlQWxpYXNSb3dJZClcbiAgICAgIC53aGVyZUNvbXBvc2l0ZSh0aGlzLmZ1bGxKb2luVGFibGVPd25lckNvbCgpLCBvd25lci4kdmFsdWVzKHRoaXMub3duZXJQcm9wKSlcbiAgICAgIC5qb2luKHJlbGF0ZWRUYWJsZUFzQWxpYXMsIGpvaW4gPT4ge1xuICAgICAgICBjb25zdCBmdWxsSm9pblRhYmxlUmVsYXRlZENvbHMgPSB0aGlzLmZ1bGxKb2luVGFibGVSZWxhdGVkQ29sKCk7XG4gICAgICAgIGNvbnN0IGZ1bGxSZWxhdGVkQ29sID0gdGhpcy5mdWxsUmVsYXRlZENvbCgpO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gZnVsbEpvaW5UYWJsZVJlbGF0ZWRDb2xzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgIGpvaW4ub24oZnVsbEpvaW5UYWJsZVJlbGF0ZWRDb2xzW2ldLCBmdWxsUmVsYXRlZENvbFtpXSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgcmV0dXJuIGJ1aWxkZXIud2hlcmVJbkNvbXBvc2l0ZShyZWxhdGVkVGFibGVSb3dJZCwgc2VsZWN0UmVsYXRlZFF1ZXJ5KTtcbiAgfVxuXG4gIGNyZWF0ZUpvaW5Nb2RlbHMob3duZXJJZCwgcmVsYXRlZCkge1xuICAgIGNvbnN0IGpvaW5Nb2RlbHMgPSBuZXcgQXJyYXkocmVsYXRlZC5sZW5ndGgpO1xuXG4gICAgZm9yIChsZXQgaSA9IDAsIGxyID0gcmVsYXRlZC5sZW5ndGg7IGkgPCBscjsgKytpKSB7XG4gICAgICBjb25zdCByZWwgPSByZWxhdGVkW2ldO1xuICAgICAgbGV0IGpvaW5Nb2RlbCA9IHt9O1xuXG4gICAgICBmb3IgKGxldCBqID0gMCwgbHAgPSB0aGlzLmpvaW5UYWJsZU93bmVyUHJvcC5sZW5ndGg7IGogPCBscDsgKytqKSB7XG4gICAgICAgIGpvaW5Nb2RlbFt0aGlzLmpvaW5UYWJsZU93bmVyUHJvcFtqXV0gPSBvd25lcklkW2pdO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGxldCBqID0gMCwgbHAgPSB0aGlzLmpvaW5UYWJsZVJlbGF0ZWRQcm9wLmxlbmd0aDsgaiA8IGxwOyArK2opIHtcbiAgICAgICAgam9pbk1vZGVsW3RoaXMuam9pblRhYmxlUmVsYXRlZFByb3Bbal1dID0gcmVsW3RoaXMucmVsYXRlZFByb3Bbal1dO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGxldCBqID0gMCwgbHAgPSB0aGlzLmpvaW5UYWJsZUV4dHJhUHJvcHMubGVuZ3RoOyBqIDwgbHA7ICsraikge1xuICAgICAgICBjb25zdCBwcm9wID0gdGhpcy5qb2luVGFibGVFeHRyYVByb3BzW2pdO1xuICAgICAgICBjb25zdCBleHRyYVZhbHVlID0gcmVsW3Byb3BdO1xuXG4gICAgICAgIGlmICghXy5pc1VuZGVmaW5lZChleHRyYVZhbHVlKSkge1xuICAgICAgICAgIGpvaW5Nb2RlbFtwcm9wXSA9IGV4dHJhVmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgam9pbk1vZGVsc1tpXSA9IGpvaW5Nb2RlbDtcbiAgICB9XG5cbiAgICByZXR1cm4gam9pbk1vZGVscztcbiAgfVxuXG4gIG9taXRFeHRyYVByb3BzKG1vZGVscykge1xuICAgIGlmICghXy5pc0VtcHR5KHRoaXMuam9pblRhYmxlRXh0cmFQcm9wcykpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gbW9kZWxzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICBtb2RlbHNbaV0uJG9taXRGcm9tRGF0YWJhc2VKc29uKHRoaXMuam9pblRhYmxlRXh0cmFQcm9wcyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXX0=