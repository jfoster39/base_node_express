'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _FindOperation2 = require('../queryBuilder/operations/FindOperation');

var _FindOperation3 = _interopRequireDefault(_FindOperation2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var RelationFindOperation = function (_FindOperation) {
  (0, _inherits3.default)(RelationFindOperation, _FindOperation);

  function RelationFindOperation(name, opt) {
    (0, _classCallCheck3.default)(this, RelationFindOperation);

    var _this = (0, _possibleConstructorReturn3.default)(this, _FindOperation.call(this, name, opt));

    _this.relation = opt.relation;
    _this.owners = opt.owners;
    return _this;
  }

  RelationFindOperation.prototype.onBeforeBuild = function onBeforeBuild(builder) {
    var ids = new Array(this.owners.length);

    for (var i = 0, l = this.owners.length; i < l; ++i) {
      ids[i] = this.owners[i].$values(this.relation.ownerProp);
    }

    this.relation.findQuery(builder, {
      ownerIds: _lodash2.default.uniqBy(ids, join)
    });
  };

  RelationFindOperation.prototype.onAfterInternal = function onAfterInternal(builder, related) {
    this.relation.createRelationProp(this.owners, related);

    return related;
  };

  return RelationFindOperation;
}(_FindOperation3.default);

exports.default = RelationFindOperation;


function join(arr) {
  return arr.join();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJlbGF0aW9uRmluZE9wZXJhdGlvbi5qcyJdLCJuYW1lcyI6WyJSZWxhdGlvbkZpbmRPcGVyYXRpb24iLCJuYW1lIiwib3B0IiwicmVsYXRpb24iLCJvd25lcnMiLCJvbkJlZm9yZUJ1aWxkIiwiYnVpbGRlciIsImlkcyIsIkFycmF5IiwibGVuZ3RoIiwiaSIsImwiLCIkdmFsdWVzIiwib3duZXJQcm9wIiwiZmluZFF1ZXJ5Iiwib3duZXJJZHMiLCJ1bmlxQnkiLCJqb2luIiwib25BZnRlckludGVybmFsIiwicmVsYXRlZCIsImNyZWF0ZVJlbGF0aW9uUHJvcCIsImFyciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7OztJQUVxQkEscUI7OztBQUVuQixpQ0FBWUMsSUFBWixFQUFrQkMsR0FBbEIsRUFBdUI7QUFBQTs7QUFBQSwrREFDckIsMEJBQU1ELElBQU4sRUFBWUMsR0FBWixDQURxQjs7QUFHckIsVUFBS0MsUUFBTCxHQUFnQkQsSUFBSUMsUUFBcEI7QUFDQSxVQUFLQyxNQUFMLEdBQWNGLElBQUlFLE1BQWxCO0FBSnFCO0FBS3RCOztrQ0FFREMsYSwwQkFBY0MsTyxFQUFTO0FBQ3JCLFFBQUlDLE1BQU0sSUFBSUMsS0FBSixDQUFVLEtBQUtKLE1BQUwsQ0FBWUssTUFBdEIsQ0FBVjs7QUFFQSxTQUFLLElBQUlDLElBQUksQ0FBUixFQUFXQyxJQUFJLEtBQUtQLE1BQUwsQ0FBWUssTUFBaEMsRUFBd0NDLElBQUlDLENBQTVDLEVBQStDLEVBQUVELENBQWpELEVBQW9EO0FBQ2xESCxVQUFJRyxDQUFKLElBQVMsS0FBS04sTUFBTCxDQUFZTSxDQUFaLEVBQWVFLE9BQWYsQ0FBdUIsS0FBS1QsUUFBTCxDQUFjVSxTQUFyQyxDQUFUO0FBQ0Q7O0FBRUQsU0FBS1YsUUFBTCxDQUFjVyxTQUFkLENBQXdCUixPQUF4QixFQUFpQztBQUMvQlMsZ0JBQVUsaUJBQUVDLE1BQUYsQ0FBU1QsR0FBVCxFQUFjVSxJQUFkO0FBRHFCLEtBQWpDO0FBR0QsRzs7a0NBRURDLGUsNEJBQWdCWixPLEVBQVNhLE8sRUFBUztBQUNoQyxTQUFLaEIsUUFBTCxDQUFjaUIsa0JBQWQsQ0FBaUMsS0FBS2hCLE1BQXRDLEVBQThDZSxPQUE5Qzs7QUFFQSxXQUFPQSxPQUFQO0FBQ0QsRzs7Ozs7a0JBekJrQm5CLHFCOzs7QUE0QnJCLFNBQVNpQixJQUFULENBQWNJLEdBQWQsRUFBbUI7QUFDakIsU0FBT0EsSUFBSUosSUFBSixFQUFQO0FBQ0QiLCJmaWxlIjoiUmVsYXRpb25GaW5kT3BlcmF0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBGaW5kT3BlcmF0aW9uIGZyb20gJy4uL3F1ZXJ5QnVpbGRlci9vcGVyYXRpb25zL0ZpbmRPcGVyYXRpb24nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZWxhdGlvbkZpbmRPcGVyYXRpb24gZXh0ZW5kcyBGaW5kT3BlcmF0aW9uIHtcblxuICBjb25zdHJ1Y3RvcihuYW1lLCBvcHQpIHtcbiAgICBzdXBlcihuYW1lLCBvcHQpO1xuXG4gICAgdGhpcy5yZWxhdGlvbiA9IG9wdC5yZWxhdGlvbjtcbiAgICB0aGlzLm93bmVycyA9IG9wdC5vd25lcnM7XG4gIH1cblxuICBvbkJlZm9yZUJ1aWxkKGJ1aWxkZXIpIHtcbiAgICBsZXQgaWRzID0gbmV3IEFycmF5KHRoaXMub3duZXJzLmxlbmd0aCk7XG5cbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IHRoaXMub3duZXJzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgaWRzW2ldID0gdGhpcy5vd25lcnNbaV0uJHZhbHVlcyh0aGlzLnJlbGF0aW9uLm93bmVyUHJvcCk7XG4gICAgfVxuXG4gICAgdGhpcy5yZWxhdGlvbi5maW5kUXVlcnkoYnVpbGRlciwge1xuICAgICAgb3duZXJJZHM6IF8udW5pcUJ5KGlkcywgam9pbilcbiAgICB9KTtcbiAgfVxuXG4gIG9uQWZ0ZXJJbnRlcm5hbChidWlsZGVyLCByZWxhdGVkKSB7XG4gICAgdGhpcy5yZWxhdGlvbi5jcmVhdGVSZWxhdGlvblByb3AodGhpcy5vd25lcnMsIHJlbGF0ZWQpO1xuXG4gICAgcmV0dXJuIHJlbGF0ZWQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gam9pbihhcnIpIHtcbiAgcmV0dXJuIGFyci5qb2luKCk7XG59Il19