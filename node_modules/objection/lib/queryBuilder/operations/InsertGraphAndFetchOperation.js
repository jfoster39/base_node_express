'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _DelegateOperation2 = require('./DelegateOperation');

var _DelegateOperation3 = _interopRequireDefault(_DelegateOperation2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var InsertGraphAndFetchOperation = function (_DelegateOperation) {
  (0, _inherits3.default)(InsertGraphAndFetchOperation, _DelegateOperation);

  function InsertGraphAndFetchOperation() {
    (0, _classCallCheck3.default)(this, InsertGraphAndFetchOperation);
    return (0, _possibleConstructorReturn3.default)(this, _DelegateOperation.apply(this, arguments));
  }

  InsertGraphAndFetchOperation.prototype.onAfterInternal = function onAfterInternal(builder) {
    var _this2 = this;

    var eagerTree = buildEagerTree(this.models, (0, _create2.default)(null));
    var eager = buildEager(eagerTree);
    var modelClass = this.models[0].constructor;
    var ids = new Array(this.models.length);

    for (var i = 0, l = this.models.length; i < l; ++i) {
      ids[i] = this.models[i].$id();
    }

    return modelClass.query().childQueryOf(builder).whereIn(modelClass.getFullIdColumn(), ids).eager(eager).then(function (models) {
      return _this2.isArray ? models : models[0] || null;
    });
  };

  (0, _createClass3.default)(InsertGraphAndFetchOperation, [{
    key: 'models',
    get: function get() {
      return this.delegate.models;
    }
  }, {
    key: 'isArray',
    get: function get() {
      return this.delegate.isArray;
    }
  }]);
  return InsertGraphAndFetchOperation;
}(_DelegateOperation3.default);

exports.default = InsertGraphAndFetchOperation;


function buildEagerTree(models, tree) {
  if (!models) {
    return;
  }

  if (Array.isArray(models)) {
    for (var i = 0, l = models.length; i < l; ++i) {
      buildEagerTreeForModel(models[i], tree);
    }
  } else {
    buildEagerTreeForModel(models, tree);
  }

  return tree;
}

function buildEagerTreeForModel(model, tree) {
  var modelClass = model.constructor;
  var relations = modelClass.getRelations();
  var relNames = (0, _keys2.default)(relations);

  for (var r = 0, lr = relNames.length; r < lr; ++r) {
    var relName = relNames[r];

    if (model.hasOwnProperty(relName)) {
      var subTree = tree[relName];

      if (!subTree) {
        subTree = (0, _create2.default)(null);
        tree[relName] = subTree;
      }

      buildEagerTree(model[relName], subTree);
    }
  }
}

function buildEager(eagerTree) {
  var keys = (0, _keys2.default)(eagerTree);
  var eager = '';

  for (var i = 0, l = keys.length; i < l; ++i) {
    var key = keys[i];

    eager += key;

    var subEager = buildEager(eagerTree[key]);

    if (subEager) {
      eager += '.' + subEager;
    }

    if (i < keys.length - 1) {
      eager += ', ';
    }
  }

  if (keys.length > 1) {
    eager = '[' + eager + ']';
  }

  return eager;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkluc2VydEdyYXBoQW5kRmV0Y2hPcGVyYXRpb24uanMiXSwibmFtZXMiOlsiSW5zZXJ0R3JhcGhBbmRGZXRjaE9wZXJhdGlvbiIsIm9uQWZ0ZXJJbnRlcm5hbCIsImJ1aWxkZXIiLCJlYWdlclRyZWUiLCJidWlsZEVhZ2VyVHJlZSIsIm1vZGVscyIsImVhZ2VyIiwiYnVpbGRFYWdlciIsIm1vZGVsQ2xhc3MiLCJjb25zdHJ1Y3RvciIsImlkcyIsIkFycmF5IiwibGVuZ3RoIiwiaSIsImwiLCIkaWQiLCJxdWVyeSIsImNoaWxkUXVlcnlPZiIsIndoZXJlSW4iLCJnZXRGdWxsSWRDb2x1bW4iLCJ0aGVuIiwiaXNBcnJheSIsImRlbGVnYXRlIiwidHJlZSIsImJ1aWxkRWFnZXJUcmVlRm9yTW9kZWwiLCJtb2RlbCIsInJlbGF0aW9ucyIsImdldFJlbGF0aW9ucyIsInJlbE5hbWVzIiwiciIsImxyIiwicmVsTmFtZSIsImhhc093blByb3BlcnR5Iiwic3ViVHJlZSIsImtleXMiLCJrZXkiLCJzdWJFYWdlciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7Ozs7SUFFcUJBLDRCOzs7Ozs7Ozt5Q0FVbkJDLGUsNEJBQWdCQyxPLEVBQVM7QUFBQTs7QUFDdkIsUUFBTUMsWUFBWUMsZUFBZSxLQUFLQyxNQUFwQixFQUE0QixzQkFBYyxJQUFkLENBQTVCLENBQWxCO0FBQ0EsUUFBTUMsUUFBUUMsV0FBV0osU0FBWCxDQUFkO0FBQ0EsUUFBTUssYUFBYSxLQUFLSCxNQUFMLENBQVksQ0FBWixFQUFlSSxXQUFsQztBQUNBLFFBQU1DLE1BQU0sSUFBSUMsS0FBSixDQUFVLEtBQUtOLE1BQUwsQ0FBWU8sTUFBdEIsQ0FBWjs7QUFFQSxTQUFLLElBQUlDLElBQUksQ0FBUixFQUFXQyxJQUFJLEtBQUtULE1BQUwsQ0FBWU8sTUFBaEMsRUFBd0NDLElBQUlDLENBQTVDLEVBQStDLEVBQUVELENBQWpELEVBQW9EO0FBQ2xESCxVQUFJ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cmFwaEFuZEZldGNoT3BlcmF0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IERlbGVnYXRlT3BlcmF0aW9uIGZyb20gJy4vRGVsZWdhdGVPcGVyYXRpb24nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbnNlcnRHcmFwaEFuZEZldGNoT3BlcmF0aW9uIGV4dGVuZHMgRGVsZWdhdGVPcGVyYXRpb24ge1xuXG4gIGdldCBtb2RlbHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGVsZWdhdGUubW9kZWxzO1xuICB9XG5cbiAgZ2V0IGlzQXJyYXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGVsZWdhdGUuaXNBcnJheTtcbiAgfVxuXG4gIG9uQWZ0ZXJJbnRlcm5hbChidWlsZGVyKSB7XG4gICAgY29uc3QgZWFnZXJUcmVlID0gYnVpbGRFYWdlclRyZWUodGhpcy5tb2RlbHMsIE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICAgIGNvbnN0IGVhZ2VyID0gYnVpbGRFYWdlcihlYWdlclRyZWUpO1xuICAgIGNvbnN0IG1vZGVsQ2xhc3MgPSB0aGlzLm1vZGVsc1swXS5jb25zdHJ1Y3RvcjtcbiAgICBjb25zdCBpZHMgPSBuZXcgQXJyYXkodGhpcy5tb2RlbHMubGVuZ3RoKTtcblxuICAgIGZvciAobGV0IGkgPSAwLCBsID0gdGhpcy5tb2RlbHMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICBpZHNbaV0gPSB0aGlzLm1vZGVsc1tpXS4kaWQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbW9kZWxDbGFzc1xuICAgICAgLnF1ZXJ5KClcbiAgICAgIC5jaGlsZFF1ZXJ5T2YoYnVpbGRlcilcbiAgICAgIC53aGVyZUluKG1vZGVsQ2xhc3MuZ2V0RnVsbElkQ29sdW1uKCksIGlkcylcbiAgICAgIC5lYWdlcihlYWdlcilcbiAgICAgIC50aGVuKG1vZGVscyA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzQXJyYXkgPyBtb2RlbHMgOiAobW9kZWxzWzBdIHx8IG51bGwpO1xuICAgICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYnVpbGRFYWdlclRyZWUobW9kZWxzLCB0cmVlKSB7XG4gIGlmICghbW9kZWxzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkobW9kZWxzKSkge1xuICAgIGZvciAobGV0IGkgPSAwLCBsID0gbW9kZWxzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgYnVpbGRFYWdlclRyZWVGb3JNb2RlbChtb2RlbHNbaV0sIHRyZWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBidWlsZEVhZ2VyVHJlZUZvck1vZGVsKG1vZGVscywgdHJlZSk7XG4gIH1cblxuICByZXR1cm4gdHJlZTtcbn1cblxuZnVuY3Rpb24gYnVpbGRFYWdlclRyZWVGb3JNb2RlbChtb2RlbCwgdHJlZSkge1xuICBjb25zdCBtb2RlbENsYXNzID0gbW9kZWwuY29uc3RydWN0b3I7XG4gIGNvbnN0IHJlbGF0aW9ucyA9IG1vZGVsQ2xhc3MuZ2V0UmVsYXRpb25zKCk7XG4gIGNvbnN0IHJlbE5hbWVzID0gT2JqZWN0LmtleXMocmVsYXRpb25zKTtcblxuICBmb3IgKGxldCByID0gMCwgbHIgPSByZWxOYW1lcy5sZW5ndGg7IHIgPCBscjsgKytyKSB7XG4gICAgY29uc3QgcmVsTmFtZSA9IHJlbE5hbWVzW3JdO1xuXG4gICAgaWYgKG1vZGVsLmhhc093blByb3BlcnR5KHJlbE5hbWUpKSB7XG4gICAgICBsZXQgc3ViVHJlZSA9IHRyZWVbcmVsTmFtZV07XG5cbiAgICAgIGlmICghc3ViVHJlZSkge1xuICAgICAgICBzdWJUcmVlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgdHJlZVtyZWxOYW1lXSA9IHN1YlRyZWU7XG4gICAgICB9XG5cbiAgICAgIGJ1aWxkRWFnZXJUcmVlKG1vZGVsW3JlbE5hbWVdLCBzdWJUcmVlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYnVpbGRFYWdlcihlYWdlclRyZWUpIHtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGVhZ2VyVHJlZSk7XG4gIGxldCBlYWdlciA9ICcnO1xuXG4gIGZvciAobGV0IGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xuXG4gICAgZWFnZXIgKz0ga2V5O1xuXG4gICAgY29uc3Qgc3ViRWFnZXIgPSBidWlsZEVhZ2VyKGVhZ2VyVHJlZVtrZXldKTtcblxuICAgIGlmIChzdWJFYWdlcikge1xuICAgICAgZWFnZXIgKz0gJy4nICsgc3ViRWFnZXI7XG4gICAgfVxuXG4gICAgaWYgKGkgPCBrZXlzLmxlbmd0aCAtIDEpIHtcbiAgICAgIGVhZ2VyICs9ICcsICc7XG4gICAgfVxuICB9XG5cbiAgaWYgKGtleXMubGVuZ3RoID4gMSkge1xuICAgIGVhZ2VyID0gJ1snICsgZWFnZXIgKyAnXSc7XG4gIH1cblxuICByZXR1cm4gZWFnZXI7XG59XG4iXX0=