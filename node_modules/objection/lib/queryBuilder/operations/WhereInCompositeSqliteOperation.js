'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _WrappingQueryBuilderOperation = require('./WrappingQueryBuilderOperation');

var _WrappingQueryBuilderOperation2 = _interopRequireDefault(_WrappingQueryBuilderOperation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var WhereInCompositeSqliteOperation = function (_WrappingQueryBuilder) {
  (0, _inherits3.default)(WhereInCompositeSqliteOperation, _WrappingQueryBuilder);

  function WhereInCompositeSqliteOperation() {
    (0, _classCallCheck3.default)(this, WhereInCompositeSqliteOperation);
    return (0, _possibleConstructorReturn3.default)(this, _WrappingQueryBuilder.apply(this, arguments));
  }

  WhereInCompositeSqliteOperation.prototype.onBuild = function onBuild(knexBuilder) {
    this.build(knexBuilder, this.args[0], this.args[1]);
  };

  WhereInCompositeSqliteOperation.prototype.build = function build(knexBuilder, columns, values) {
    var isCompositeKey = Array.isArray(columns) && columns.length > 1;

    if (isCompositeKey) {
      this.buildComposite(knexBuilder, columns, values);
    } else {
      this.buildNonComposite(knexBuilder, columns, values);
    }
  };

  WhereInCompositeSqliteOperation.prototype.buildComposite = function buildComposite(knexBuilder, columns, values) {
    if (!Array.isArray(values)) {
      // If the `values` is not an array of values but a function or a subquery
      // we have no way to implement this method.
      throw new Error('sqlite doesn\'t support multi-column where in clauses');
    }

    // Sqlite doesn't support the `where in` syntax for multiple columns but
    // we can emulate it using grouped `or` clauses.
    knexBuilder.where(function (builder) {
      values.forEach(function (val) {
        builder.orWhere(function (builder) {
          columns.forEach(function (col, idx) {
            builder.andWhere(col, val[idx]);
          });
        });
      });
    });
  };

  WhereInCompositeSqliteOperation.prototype.buildNonComposite = function buildNonComposite(knexBuilder, columns, values) {
    var col = typeof columns === 'string' ? columns : columns[0];

    if (Array.isArray(values)) {
      values = _lodash2.default.compact(_lodash2.default.flatten(values));
    }

    // For non-composite keys we can use the normal whereIn.
    knexBuilder.whereIn(col, values);
  };

  return WhereInCompositeSqliteOperation;
}(_WrappingQueryBuilderOperation2.default);

exports.default = WhereInCompositeSqliteOperation;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIldoZXJlSW5Db21wb3NpdGVTcWxpdGVPcGVyYXRpb24uanMiXSwibmFtZXMiOlsiV2hlcmVJbkNvbXBvc2l0ZVNxbGl0ZU9wZXJhdGlvbiIsIm9uQnVpbGQiLCJrbmV4QnVpbGRlciIsImJ1aWxkIiwiYXJncyIsImNvbHVtbnMiLCJ2YWx1ZXMiLCJpc0NvbXBvc2l0ZUtleSIsIkFycmF5IiwiaXNBcnJheSIsImxlbmd0aCIsImJ1aWxkQ29tcG9zaXRlIiwiYnVpbGROb25Db21wb3NpdGUiLCJFcnJvciIsIndoZXJlIiwiZm9yRWFjaCIsImJ1aWxkZXIiLCJvcldoZXJlIiwiY29sIiwiaWR4IiwiYW5kV2hlcmUiLCJ2YWwiLCJjb21wYWN0IiwiZmxhdHRlbiIsIndoZXJlSW4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7OztBQUNBOzs7Ozs7SUFFcUJBLCtCOzs7Ozs7Ozs0Q0FFbkJDLE8sb0JBQVFDLFcsRUFBYTtBQUNuQixTQUFLQyxLQUFMLENBQVdELFdBQVgsRUFBd0IsS0FBS0UsSUFBTCxDQUFVLENBQVYsQ0FBeEIsRUFBc0MsS0FBS0EsSUFBTCxDQUFVLENBQVYsQ0FBdEM7QUFDRCxHOzs0Q0FFREQsSyxrQkFBTUQsVyxFQUFhRyxPLEVBQVNDLE0sRUFBUTtBQUNsQyxRQUFJQyxpQkFBaUJDLE1BQU1DLE9BQU4sQ0FBY0osT0FBZCxLQUEwQkEsUUFBUUssTUFBUixHQUFpQixDQUFoRTs7QUFFQSxRQUFJSCxjQUFKLEVBQW9CO0FBQ2xCLFdBQUtJLGNBQUwsQ0FBb0JULFdBQXBCLEVBQWlDRyxPQUFqQyxFQUEwQ0MsTUFBMUM7QUFDRCxLQUZELE1BRU87QUFDTCxXQUFLTSxpQkFBTCxDQUF1QlYsV0FBdkIsRUFBb0NHLE9BQXBDLEVBQTZDQyxNQUE3QztBQUNEO0FBQ0YsRzs7NENBRURLLGMsMkJBQWVULFcsRUFBYUcsTyxFQUFTQyxNLEVBQVE7QUFDM0MsUUFBSSxDQUFDRSxNQUFNQyxPQUFOLENBQWNILE1BQWQsQ0FBTCxFQUE0QjtBQUMxQjtBQUNBO0FBQ0EsWUFBTSxJQUFJTyxLQUFKLHlEQUFOO0FBQ0Q7O0FBRUQ7QUFDQTtBQUNBWCxnQkFBWVksS0FBWixDQUFrQixtQkFBVztBQUMzQlIsYUFBT1MsT0FBUCxDQUFlLGVBQU87QUFDcEJDLGdCQUFRQyxPQUFSLENBQWdCLG1CQUFXO0FBQ3pCWixrQkFBUVUsT0FBUixDQUFnQixVQUFDRyxHQUFELEVBQU1DLEdBQU4sRUFBYztBQUM1Qkgsb0JBQVFJLFFBQVIsQ0FBaUJGLEdBQWpCLEVBQXNCRyxJQUFJRixHQUFKLENBQXRCO0FBQ0QsV0FGRDtBQUdELFNBSkQ7QUFLRCxPQU5EO0FBT0QsS0FSRDtBQVNELEc7OzRDQUVEUCxpQiw4QkFBa0JWLFcsRUFBYUcsTyxFQUFTQyxNLEVBQVE7QUFDOUMsUUFBSVksTUFBTyxPQUFPYixPQUFQLEtBQW1CLFFBQXBCLEdBQWdDQSxPQUFoQyxHQUEwQ0EsUUFBUSxDQUFSLENBQXBEOztBQUVBLFFBQUlHLE1BQU1DLE9BQU4sQ0FBY0gsTUFBZCxDQUFKLEVBQTJCO0FBQ3pCQSxlQUFTLGlCQUFFZ0IsT0FBRixDQUFVLGlCQUFFQyxPQUFGLENBQVVqQixNQUFWLENBQVYsQ0FBVDtBQUNEOztBQUVEO0FBQ0FKLGdCQUFZc0IsT0FBWixDQUFvQk4sR0FBcEIsRUFBeUJaLE1BQXpCO0FBQ0QsRzs7Ozs7a0JBN0NrQk4sK0IiLCJmaWxlIjoiV2hlcmVJbkNvbXBvc2l0ZVNxbGl0ZU9wZXJhdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgV3JhcHBpbmdRdWVyeUJ1aWxkZXJPcGVyYXRpb24gZnJvbSAnLi9XcmFwcGluZ1F1ZXJ5QnVpbGRlck9wZXJhdGlvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdoZXJlSW5Db21wb3NpdGVTcWxpdGVPcGVyYXRpb24gZXh0ZW5kcyBXcmFwcGluZ1F1ZXJ5QnVpbGRlck9wZXJhdGlvbiB7XG5cbiAgb25CdWlsZChrbmV4QnVpbGRlcikge1xuICAgIHRoaXMuYnVpbGQoa25leEJ1aWxkZXIsIHRoaXMuYXJnc1swXSwgdGhpcy5hcmdzWzFdKTtcbiAgfVxuXG4gIGJ1aWxkKGtuZXhCdWlsZGVyLCBjb2x1bW5zLCB2YWx1ZXMpIHtcbiAgICBsZXQgaXNDb21wb3NpdGVLZXkgPSBBcnJheS5pc0FycmF5KGNvbHVtbnMpICYmIGNvbHVtbnMubGVuZ3RoID4gMTtcblxuICAgIGlmIChpc0NvbXBvc2l0ZUtleSkge1xuICAgICAgdGhpcy5idWlsZENvbXBvc2l0ZShrbmV4QnVpbGRlciwgY29sdW1ucywgdmFsdWVzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5idWlsZE5vbkNvbXBvc2l0ZShrbmV4QnVpbGRlciwgY29sdW1ucywgdmFsdWVzKTtcbiAgICB9XG4gIH1cblxuICBidWlsZENvbXBvc2l0ZShrbmV4QnVpbGRlciwgY29sdW1ucywgdmFsdWVzKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlcykpIHtcbiAgICAgIC8vIElmIHRoZSBgdmFsdWVzYCBpcyBub3QgYW4gYXJyYXkgb2YgdmFsdWVzIGJ1dCBhIGZ1bmN0aW9uIG9yIGEgc3VicXVlcnlcbiAgICAgIC8vIHdlIGhhdmUgbm8gd2F5IHRvIGltcGxlbWVudCB0aGlzIG1ldGhvZC5cbiAgICAgIHRocm93IG5ldyBFcnJvcihgc3FsaXRlIGRvZXNuJ3Qgc3VwcG9ydCBtdWx0aS1jb2x1bW4gd2hlcmUgaW4gY2xhdXNlc2ApO1xuICAgIH1cblxuICAgIC8vIFNxbGl0ZSBkb2Vzbid0IHN1cHBvcnQgdGhlIGB3aGVyZSBpbmAgc3ludGF4IGZvciBtdWx0aXBsZSBjb2x1bW5zIGJ1dFxuICAgIC8vIHdlIGNhbiBlbXVsYXRlIGl0IHVzaW5nIGdyb3VwZWQgYG9yYCBjbGF1c2VzLlxuICAgIGtuZXhCdWlsZGVyLndoZXJlKGJ1aWxkZXIgPT4ge1xuICAgICAgdmFsdWVzLmZvckVhY2godmFsID0+IHtcbiAgICAgICAgYnVpbGRlci5vcldoZXJlKGJ1aWxkZXIgPT4ge1xuICAgICAgICAgIGNvbHVtbnMuZm9yRWFjaCgoY29sLCBpZHgpID0+IHtcbiAgICAgICAgICAgIGJ1aWxkZXIuYW5kV2hlcmUoY29sLCB2YWxbaWR4XSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBidWlsZE5vbkNvbXBvc2l0ZShrbmV4QnVpbGRlciwgY29sdW1ucywgdmFsdWVzKSB7XG4gICAgbGV0IGNvbCA9ICh0eXBlb2YgY29sdW1ucyA9PT0gJ3N0cmluZycpID8gY29sdW1ucyA6IGNvbHVtbnNbMF07XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZXMpKSB7XG4gICAgICB2YWx1ZXMgPSBfLmNvbXBhY3QoXy5mbGF0dGVuKHZhbHVlcykpO1xuICAgIH1cblxuICAgIC8vIEZvciBub24tY29tcG9zaXRlIGtleXMgd2UgY2FuIHVzZSB0aGUgbm9ybWFsIHdoZXJlSW4uXG4gICAga25leEJ1aWxkZXIud2hlcmVJbihjb2wsIHZhbHVlcyk7XG4gIH1cbn1cblxuIl19