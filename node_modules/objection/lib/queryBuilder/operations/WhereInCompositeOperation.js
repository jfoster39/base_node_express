'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _WrappingQueryBuilderOperation = require('./WrappingQueryBuilderOperation');

var _WrappingQueryBuilderOperation2 = _interopRequireDefault(_WrappingQueryBuilderOperation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var WhereInCompositeOperation = function (_WrappingQueryBuilder) {
  (0, _inherits3.default)(WhereInCompositeOperation, _WrappingQueryBuilder);

  function WhereInCompositeOperation() {
    (0, _classCallCheck3.default)(this, WhereInCompositeOperation);
    return (0, _possibleConstructorReturn3.default)(this, _WrappingQueryBuilder.apply(this, arguments));
  }

  WhereInCompositeOperation.prototype.onBuild = function onBuild(knexBuilder) {
    this.build(knexBuilder, this.args[0], this.args[1]);
  };

  WhereInCompositeOperation.prototype.build = function build(knexBuilder, columns, values) {
    var isCompositeKey = Array.isArray(columns) && columns.length > 1;

    if (isCompositeKey) {
      this.buildComposite(knexBuilder, columns, values);
    } else {
      this.buildNonComposite(knexBuilder, columns, values);
    }
  };

  WhereInCompositeOperation.prototype.buildComposite = function buildComposite(knexBuilder, columns, values) {
    if (Array.isArray(values)) {
      this.buildCompositeValue(knexBuilder, columns, values);
    } else {
      this.buildCompositeSubquery(knexBuilder, columns, values);
    }
  };

  WhereInCompositeOperation.prototype.buildCompositeValue = function buildCompositeValue(knexBuilder, columns, values) {
    knexBuilder.whereIn(columns, values);
  };

  WhereInCompositeOperation.prototype.buildCompositeSubquery = function buildCompositeSubquery(knexBuilder, columns, subquery) {
    var formatter = knexBuilder.client.formatter();

    var sql = '(';
    for (var i = 0, l = columns.length; i < l; ++i) {
      sql += formatter.wrap(columns[i]);

      if (i !== columns.length - 1) {
        sql += ',';
      }
    }
    sql += ')';

    knexBuilder.whereIn(knexBuilder.client.raw(sql), subquery);
  };

  WhereInCompositeOperation.prototype.buildNonComposite = function buildNonComposite(knexBuilder, columns, values) {
    var col = typeof columns === 'string' ? columns : columns[0];

    if (Array.isArray(values)) {
      values = _lodash2.default.compact(_lodash2.default.flatten(values));
    } else {
      values = [values];
    }

    knexBuilder.whereIn(col, values);
  };

  return WhereInCompositeOperation;
}(_WrappingQueryBuilderOperation2.default);

exports.default = WhereInCompositeOperation;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIldoZXJlSW5Db21wb3NpdGVPcGVyYXRpb24uanMiXSwibmFtZXMiOlsiV2hlcmVJbkNvbXBvc2l0ZU9wZXJhdGlvbiIsIm9uQnVpbGQiLCJrbmV4QnVpbGRlciIsImJ1aWxkIiwiYXJncyIsImNvbHVtbnMiLCJ2YWx1ZXMiLCJpc0NvbXBvc2l0ZUtleSIsIkFycmF5IiwiaXNBcnJheSIsImxlbmd0aCIsImJ1aWxkQ29tcG9zaXRlIiwiYnVpbGROb25Db21wb3NpdGUiLCJidWlsZENvbXBvc2l0ZVZhbHVlIiwiYnVpbGRDb21wb3NpdGVTdWJxdWVyeSIsIndoZXJlSW4iLCJzdWJxdWVyeSIsImZvcm1hdHRlciIsImNsaWVudCIsInNxbCIsImkiLCJsIiwid3JhcCIsInJhdyIsImNvbCIsImNvbXBhY3QiLCJmbGF0dGVuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7QUFDQTs7Ozs7O0lBRXFCQSx5Qjs7Ozs7Ozs7c0NBRW5CQyxPLG9CQUFRQyxXLEVBQWE7QUFDbkIsU0FBS0MsS0FBTCxDQUFXRCxXQUFYLEVBQXdCLEtBQUtFLElBQUwsQ0FBVSxDQUFWLENBQXhCLEVBQXNDLEtBQUtBLElBQUwsQ0FBVSxDQUFWLENBQXRDO0FBQ0QsRzs7c0NBRURELEssa0JBQU1ELFcsRUFBYUcsTyxFQUFTQyxNLEVBQVE7QUFDbEMsUUFBSUMsaUJBQWlCQyxNQUFNQyxPQUFOLENBQWNKLE9BQWQsS0FBMEJBLFFBQVFLLE1BQVIsR0FBaUIsQ0FBaEU7O0FBRUEsUUFBSUgsY0FBSixFQUFvQjtBQUNsQixXQUFLSSxjQUFMLENBQW9CVCxXQUFwQixFQUFpQ0csT0FBakMsRUFBMENDLE1BQTFDO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsV0FBS00saUJBQUwsQ0FBdUJWLFdBQXZCLEVBQW9DRyxPQUFwQyxFQUE2Q0MsTUFBN0M7QUFDRDtBQUNGLEc7O3NDQUVESyxjLDJCQUFlVCxXLEVBQWFHLE8sRUFBU0MsTSxFQUFRO0FBQzNDLFFBQUlFLE1BQU1DLE9BQU4sQ0FBY0gsTUFBZCxDQUFKLEVBQTJCO0FBQ3pCLFdBQUtPLG1CQUFMLENBQXlCWCxXQUF6QixFQUFzQ0csT0FBdEMsRUFBK0NDLE1BQS9DO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsV0FBS1Esc0JBQUwsQ0FBNEJaLFdBQTVCLEVBQXlDRyxPQUF6QyxFQUFrREMsTUFBbEQ7QUFDRDtBQUNGLEc7O3NDQUVETyxtQixnQ0FBb0JYLFcsRUFBYUcsTyxFQUFTQyxNLEVBQVE7QUFDaERKLGdCQUFZYSxPQUFaLENBQW9CVixPQUFwQixFQUE2QkMsTUFBN0I7QUFDRCxHOztzQ0FFRFEsc0IsbUNBQXVCWixXLEVBQWFHLE8sRUFBU1csUSxFQUFVO0FBQ3JELFFBQU1DLFlBQVlmLFlBQVlnQixNQUFaLENBQW1CRCxTQUFuQixFQUFsQjs7QUFFQSxRQUFJRSxNQUFNLEdBQVY7QUFDQSxTQUFLLElBQUlDLElBQUksQ0FBUixFQUFXQyxJQUFJaEIsUUFBUUssTUFBNUIsRUFBb0NVLElBQUlDLENBQXhDLEVBQTJDLEVBQUVELENBQTdDLEVBQWdEO0FBQzlDRCxhQUFPRixVQUFVSyxJQUFWLENBQWVqQixRQUFRZSxDQUFSLENBQWYsQ0FBUDs7QUFFQSxVQUFJQSxNQUFNZixRQUFRSyxNQUFSLEdBQWlCLENBQTNCLEVBQThCO0FBQzVCUyxlQUFPLEdBQVA7QUFDRDtBQUNGO0FBQ0RBLFdBQU8sR0FBUDs7QUFFQWpCLGdCQUFZYSxPQUFaLENBQW9CYixZQUFZZ0IsTUFBWixDQUFtQkssR0FBbkIsQ0FBdUJKLEdBQXZCLENBQXBCLEVBQWlESCxRQUFqRDtBQUNELEc7O3NDQUVESixpQiw4QkFBa0JWLFcsRUFBYUcsTyxFQUFTQyxNLEVBQVE7QUFDOUMsUUFBSWtCLE1BQU8sT0FBT25CLE9BQVAsS0FBbUIsUUFBcEIsR0FBZ0NBLE9BQWhDLEdBQTBDQSxRQUFRLENBQVIsQ0FBcEQ7O0FBRUEsUUFBSUcsTUFBTUMsT0FBTixDQUFjSCxNQUFkLENBQUosRUFBMkI7QUFDekJBLGVBQVMsaUJBQUVtQixPQUFGLENBQVUsaUJBQUVDLE9BQUYsQ0FBVXBCLE1BQVYsQ0FBVixDQUFUO0FBQ0QsS0FGRCxNQUVPO0FBQ0xBLGVBQVMsQ0FBQ0EsTUFBRCxDQUFUO0FBQ0Q7O0FBRURKLGdCQUFZYSxPQUFaLENBQW9CUyxHQUFwQixFQUF5QmxCLE1BQXpCO0FBQ0QsRzs7Ozs7a0JBdERrQk4seUIiLCJmaWxlIjoiV2hlcmVJbkNvbXBvc2l0ZU9wZXJhdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgV3JhcHBpbmdRdWVyeUJ1aWxkZXJPcGVyYXRpb24gZnJvbSAnLi9XcmFwcGluZ1F1ZXJ5QnVpbGRlck9wZXJhdGlvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdoZXJlSW5Db21wb3NpdGVPcGVyYXRpb24gZXh0ZW5kcyBXcmFwcGluZ1F1ZXJ5QnVpbGRlck9wZXJhdGlvbiB7XG5cbiAgb25CdWlsZChrbmV4QnVpbGRlcikge1xuICAgIHRoaXMuYnVpbGQoa25leEJ1aWxkZXIsIHRoaXMuYXJnc1swXSwgdGhpcy5hcmdzWzFdKTtcbiAgfVxuXG4gIGJ1aWxkKGtuZXhCdWlsZGVyLCBjb2x1bW5zLCB2YWx1ZXMpIHtcbiAgICBsZXQgaXNDb21wb3NpdGVLZXkgPSBBcnJheS5pc0FycmF5KGNvbHVtbnMpICYmIGNvbHVtbnMubGVuZ3RoID4gMTtcblxuICAgIGlmIChpc0NvbXBvc2l0ZUtleSkge1xuICAgICAgdGhpcy5idWlsZENvbXBvc2l0ZShrbmV4QnVpbGRlciwgY29sdW1ucywgdmFsdWVzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5idWlsZE5vbkNvbXBvc2l0ZShrbmV4QnVpbGRlciwgY29sdW1ucywgdmFsdWVzKTtcbiAgICB9XG4gIH1cblxuICBidWlsZENvbXBvc2l0ZShrbmV4QnVpbGRlciwgY29sdW1ucywgdmFsdWVzKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWVzKSkge1xuICAgICAgdGhpcy5idWlsZENvbXBvc2l0ZVZhbHVlKGtuZXhCdWlsZGVyLCBjb2x1bW5zLCB2YWx1ZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmJ1aWxkQ29tcG9zaXRlU3VicXVlcnkoa25leEJ1aWxkZXIsIGNvbHVtbnMsIHZhbHVlcyk7XG4gICAgfVxuICB9XG5cbiAgYnVpbGRDb21wb3NpdGVWYWx1ZShrbmV4QnVpbGRlciwgY29sdW1ucywgdmFsdWVzKSB7XG4gICAga25leEJ1aWxkZXIud2hlcmVJbihjb2x1bW5zLCB2YWx1ZXMpO1xuICB9XG5cbiAgYnVpbGRDb21wb3NpdGVTdWJxdWVyeShrbmV4QnVpbGRlciwgY29sdW1ucywgc3VicXVlcnkpIHtcbiAgICBjb25zdCBmb3JtYXR0ZXIgPSBrbmV4QnVpbGRlci5jbGllbnQuZm9ybWF0dGVyKCk7XG5cbiAgICBsZXQgc3FsID0gJygnO1xuICAgIGZvciAobGV0IGkgPSAwLCBsID0gY29sdW1ucy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgIHNxbCArPSBmb3JtYXR0ZXIud3JhcChjb2x1bW5zW2ldKTtcblxuICAgICAgaWYgKGkgIT09IGNvbHVtbnMubGVuZ3RoIC0gMSkge1xuICAgICAgICBzcWwgKz0gJywnO1xuICAgICAgfVxuICAgIH1cbiAgICBzcWwgKz0gJyknO1xuXG4gICAga25leEJ1aWxkZXIud2hlcmVJbihrbmV4QnVpbGRlci5jbGllbnQucmF3KHNxbCksIHN1YnF1ZXJ5KTtcbiAgfVxuXG4gIGJ1aWxkTm9uQ29tcG9zaXRlKGtuZXhCdWlsZGVyLCBjb2x1bW5zLCB2YWx1ZXMpIHtcbiAgICBsZXQgY29sID0gKHR5cGVvZiBjb2x1bW5zID09PSAnc3RyaW5nJykgPyBjb2x1bW5zIDogY29sdW1uc1swXTtcblxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlcykpIHtcbiAgICAgIHZhbHVlcyA9IF8uY29tcGFjdChfLmZsYXR0ZW4odmFsdWVzKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlcyA9IFt2YWx1ZXNdO1xuICAgIH1cblxuICAgIGtuZXhCdWlsZGVyLndoZXJlSW4oY29sLCB2YWx1ZXMpO1xuICB9XG59XG5cbiJdfQ==