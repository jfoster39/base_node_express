'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _getOwnPropertyDescriptor = require('babel-runtime/core-js/object/get-own-property-descriptor');

var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _dec, _dec2, _dec3, _dec4, _desc, _value, _class, _class2, _temp;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _ModelBase2 = require('./ModelBase');

var _ModelBase3 = _interopRequireDefault(_ModelBase2);

var _QueryBuilder = require('../queryBuilder/QueryBuilder');

var _QueryBuilder2 = _interopRequireDefault(_QueryBuilder);

var _inheritModel = require('./inheritModel');

var _inheritModel2 = _interopRequireDefault(_inheritModel);

var _RelationExpression = require('../queryBuilder/RelationExpression');

var _RelationExpression2 = _interopRequireDefault(_RelationExpression);

var _hiddenData = require('../utils/hiddenData');

var _hiddenData2 = require('../utils/decorators/hiddenData');

var _hiddenData3 = _interopRequireDefault(_hiddenData2);

var _deprecated = require('../utils/decorators/deprecated');

var _deprecated2 = _interopRequireDefault(_deprecated);

var _memoize = require('../utils/decorators/memoize');

var _memoize2 = _interopRequireDefault(_memoize);

var _Relation = require('../relations/Relation');

var _Relation2 = _interopRequireDefault(_Relation);

var _HasOneRelation = require('../relations/hasOne/HasOneRelation');

var _HasOneRelation2 = _interopRequireDefault(_HasOneRelation);

var _HasManyRelation = require('../relations/hasMany/HasManyRelation');

var _HasManyRelation2 = _interopRequireDefault(_HasManyRelation);

var _ManyToManyRelation = require('../relations/manyToMany/ManyToManyRelation');

var _ManyToManyRelation2 = _interopRequireDefault(_ManyToManyRelation);

var _BelongsToOneRelation = require('../relations/belongsToOne/BelongsToOneRelation');

var _BelongsToOneRelation2 = _interopRequireDefault(_BelongsToOneRelation);

var _InstanceFindOperation = require('../queryBuilder/operations/InstanceFindOperation');

var _InstanceFindOperation2 = _interopRequireDefault(_InstanceFindOperation);

var _InstanceInsertOperation = require('../queryBuilder/operations/InstanceInsertOperation');

var _InstanceInsertOperation2 = _interopRequireDefault(_InstanceInsertOperation);

var _InstanceUpdateOperation = require('../queryBuilder/operations/InstanceUpdateOperation');

var _InstanceUpdateOperation2 = _interopRequireDefault(_InstanceUpdateOperation);

var _InstanceDeleteOperation = require('../queryBuilder/operations/InstanceDeleteOperation');

var _InstanceDeleteOperation2 = _interopRequireDefault(_InstanceDeleteOperation);

var _JoinEagerOperation = require('../queryBuilder/operations/JoinEagerOperation');

var _JoinEagerOperation2 = _interopRequireDefault(_JoinEagerOperation);

var _WhereInEagerOperation = require('../queryBuilder/operations/WhereInEagerOperation');

var _WhereInEagerOperation2 = _interopRequireDefault(_WhereInEagerOperation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

var JoinEagerAlgorithm = function JoinEagerAlgorithm() {
  return new _JoinEagerOperation2.default('eager');
};

var WhereInEagerAlgorithm = function WhereInEagerAlgorithm() {
  return new _WhereInEagerOperation2.default('eager');
};

var Model = (_dec = (0, _deprecated2.default)({ removedIn: '0.7.0', useInstead: 'BelongsToOneRelation' }), _dec2 = (0, _deprecated2.default)({ removedIn: '0.7.0', useInstead: 'HasManyRelation' }), _dec3 = (0, _hiddenData3.default)(), _dec4 = (0, _hiddenData3.default)(), (_class = (_temp = _class2 = function (_ModelBase) {
  (0, _inherits3.default)(Model, _ModelBase);

  function Model() {
    (0, _classCallCheck3.default)(this, Model);
    return (0, _possibleConstructorReturn3.default)(this, _ModelBase.apply(this, arguments));
  }

  /**
   * @param {*=} id
   * @returns {*}
   */
  Model.prototype.$id = function $id(id) {
    if (arguments.length > 0) {
      return setId(this, arguments[0]);
    } else {
      return getId(this);
    }
  };

  /**
   * @returns {knex}
   */


  Model.prototype.$knex = function $knex() {
    return this.constructor.knex();
  };

  /**
   * @returns {knex}
   */


  Model.prototype.$transaction = function $transaction() {
    return this.constructor.transaction();
  };

  /**
   * @param {Transaction=} trx
   * @returns {QueryBuilder}
   */


  Model.prototype.$query = function $query(trx) {
    var _this2 = this;

    var ModelClass = this.constructor;

    return ModelClass.QueryBuilder.forClass(ModelClass).transacting(trx).findOperationFactory(function () {
      return new _InstanceFindOperation2.default('find', { instance: _this2 });
    }).insertOperationFactory(function () {
      return new _InstanceInsertOperation2.default('insert', { instance: _this2 });
    }).updateOperationFactory(function () {
      return new _InstanceUpdateOperation2.default('update', { instance: _this2 });
    }).patchOperationFactory(function () {
      return new _InstanceUpdateOperation2.default('patch', { instance: _this2, modelOptions: { patch: true } });
    }).deleteOperationFactory(function () {
      return new _InstanceDeleteOperation2.default('delete', { instance: _this2 });
    }).relateOperationFactory(function () {
      throw new Error('`relate` makes no sense in this context');
    }).unrelateOperationFactory(function () {
      throw new Error('`unrelate` makes no sense in this context');
    });
  };

  /**
   * @param {string} relationName
   * @param {Transaction=} trx
   * @returns {QueryBuilder}
   */


  Model.prototype.$relatedQuery = function $relatedQuery(relationName, trx) {
    var _this3 = this;

    var ModelClass = this.constructor;
    var relation = ModelClass.getRelation(relationName);
    var RelatedModelClass = relation.relatedModelClass;

    return ModelClass.RelatedQueryBuilder.forClass(RelatedModelClass).transacting(trx).findOperationFactory(function (builder) {
      return relation.find(builder, [_this3]);
    }).insertOperationFactory(function (builder) {
      return relation.insert(builder, _this3);
    }).updateOperationFactory(function (builder) {
      return relation.update(builder, _this3);
    }).patchOperationFactory(function (builder) {
      return relation.patch(builder, _this3);
    }).deleteOperationFactory(function (builder) {
      return relation.delete(builder, _this3);
    }).relateOperationFactory(function (builder) {
      return relation.relate(builder, _this3);
    }).unrelateOperationFactory(function (builder) {
      return relation.unrelate(builder, _this3);
    });
  };

  /**
   * @param {string|RelationExpression} relationExpression
   * @param {Object.<string, function(QueryBuilder)>=} filters
   * @returns {QueryBuilder}
   */


  Model.prototype.$loadRelated = function $loadRelated(relationExpression, filters) {
    return this.constructor.loadRelated(this, relationExpression, filters);
  };

  /**
   * @param {Constructor.<Model>=} filterConstructor
   * @param {function(Model)} callback
   * @return {Model}
   */


  Model.prototype.$traverse = function $traverse(filterConstructor, callback) {
    if (_lodash2.default.isUndefined(callback)) {
      callback = filterConstructor;
      filterConstructor = null;
    }

    this.constructor.traverse(filterConstructor, this, callback);
    return this;
  };

  Model.prototype.$validate = function $validate() {
    var json = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this;
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (json instanceof Model) {
      // Strip away relations and other internal stuff.
      json = json.$parseJson(json.$toJson(true));
    }

    return _ModelBase.prototype.$validate.call(this, json, options);
  };

  Model.prototype.$parseDatabaseJson = function $parseDatabaseJson(json) {
    var jsonAttr = this.constructor.getJsonAttributes();

    if (jsonAttr.length) {
      for (var i = 0, l = jsonAttr.length; i < l; ++i) {
        var attr = jsonAttr[i];
        var value = json[attr];

        if (_lodash2.default.isString(value)) {
          json[attr] = JSON.parse(value);
        }
      }
    }

    return json;
  };

  Model.prototype.$formatDatabaseJson = function $formatDatabaseJson(json) {
    var jsonAttr = this.constructor.getJsonAttributes();

    if (jsonAttr.length) {
      for (var i = 0, l = jsonAttr.length; i < l; ++i) {
        var attr = jsonAttr[i];
        var value = json[attr];

        if (_lodash2.default.isObject(value)) {
          json[attr] = (0, _stringify2.default)(value);
        }
      }
    }

    return json;
  };

  Model.prototype.$setJson = function $setJson(json, options) {
    _ModelBase.prototype.$setJson.call(this, json, options);

    if (!_lodash2.default.isObject(json)) {
      return;
    }

    var relations = this.constructor.getRelations();
    var relNames = (0, _keys2.default)(relations);

    // Parse relations into Model instances.
    for (var i = 0, l = relNames.length; i < l; ++i) {
      var relationName = relNames[i];

      if (_lodash2.default.has(json, relationName)) {
        var relationJson = json[relationName];
        var relation = relations[relationName];

        if (Array.isArray(relationJson)) {
          this[relationName] = relation.relatedModelClass.ensureModelArray(relationJson, options);
        } else if (relationJson) {
          this[relationName] = relation.relatedModelClass.ensureModel(relationJson, options);
        } else {
          this[relationName] = null;
        }
      }
    }
  };

  /**
   * @param {boolean=} shallow
   */


  Model.prototype.$toJson = function $toJson(shallow) {
    if (shallow) {
      return this.$$toJson(false, this.constructor.getRelations(), null);
    } else {
      return this.$$toJson(false, null, null);
    }
  };

  /**
   * @override
   */


  Model.prototype.$toDatabaseJson = function $toDatabaseJson() {
    var jsonSchema = this.constructor.getJsonSchema();

    if (jsonSchema && this.constructor.pickJsonSchemaProperties) {
      return this.$$toJson(true, null, jsonSchema.properties);
    } else {
      return this.$$toJson(true, this.constructor.getRelations(), null);
    }
  };

  /**
   * @param {Object} queryContext
   * @returns {Promise|*}
   */


  Model.prototype.$beforeInsert = function $beforeInsert(queryContext) {};

  /**
   * @param {Object} queryContext
   * @returns {Promise|*}
   */


  Model.prototype.$afterInsert = function $afterInsert(queryContext) {};

  /**
   * @param {ModelOptions} opt
   * @param {QueryBuilderContext} queryContext
   * @returns {Promise|*}
   */


  Model.prototype.$beforeUpdate = function $beforeUpdate(opt, queryContext) {};

  /**
   * @param {ModelOptions} opt
   * @param {QueryBuilderContext} queryContext
   * @returns {Promise|*}
   */


  Model.prototype.$afterUpdate = function $afterUpdate(opt, queryContext) {};

  /**
   * @param {QueryBuilderContext} queryContext
   * @returns {Promise|*}
   */


  Model.prototype.$afterGet = function $afterGet(queryContext) {};

  /**
   * @param {QueryBuilderContext} queryContext
   * @returns {Promise|*}
   */


  Model.prototype.$beforeDelete = function $beforeDelete(queryContext) {};

  /**
   * @param {QueryBuilderContext} queryContext
   * @returns {Promise|*}
   */


  Model.prototype.$afterDelete = function $afterDelete(queryContext) {};

  /**
   * @param {Transaction=} trx
   * @returns {QueryBuilder}
   */


  Model.query = function query(trx) {
    var ModelClass = this;

    return ModelClass.QueryBuilder.forClass(ModelClass).transacting(trx).relateOperationFactory(function () {
      throw new Error('`relate` makes no sense in this context');
    }).unrelateOperationFactory(function () {
      throw new Error('`unrelate` makes no sense in this context');
    });
  };

  /**
   * @param {knex=} knex
   * @returns {knex}
   */


  Model.knex = function knex(_knex) {
    if (arguments.length) {
      this.$$knex = _knex;
    } else {
      return this.$$knex;
    }
  };

  /**
   * @returns {knex}
   */


  Model.transaction = function transaction() {
    return this.knex();
  };

  /**
   * @return {Raw}
   */


  Model.raw = function raw() {
    var knex = this.knex();
    return knex.raw.apply(knex, arguments);
  };

  /**
   * @return {Object}
   */


  Model.fn = function fn() {
    var knex = this.knex();
    return knex.fn;
  };

  /**
   * @return {Formatter}
   */


  Model.formatter = function formatter() {
    return this.knex().client.formatter();
  };

  /**
   * @returns {knex.QueryBuilder}
   */


  Model.knexQuery = function knexQuery() {
    return this.knex().table(this.tableName);
  };

  /**
   * @returns {string}
   */


  Model.uniqueTag = function uniqueTag() {
    return this.tableName;
  };

  /**
   * @param {knex} knex
   * @returns {Constructor.<Model>}
   */


  Model.bindKnex = function bindKnex(knex) {
    var ModelClass = this;

    if (!knex.$$objection) {
      Object.defineProperty(knex, '$$objection', {
        enumerable: false,
        writable: false,
        value: {
          boundModels: (0, _create2.default)(null)
        }
      });
    }

    // Check if this model class has already been bound to the given knex.
    if (knex.$$objection.boundModels[ModelClass.uniqueTag()]) {
      return knex.$$objection.boundModels[ModelClass.uniqueTag()];
    }

    // Create a new subclass of this class.
    var BoundModelClass = (0, _inheritModel2.default)(ModelClass);

    // The bound model is equal to the source model in every way. We want to copy
    // the hidden data as-is from the source so that we don't get the performance
    // penalty of calculating all memoized etc. values again.
    (0, _hiddenData.inheritHiddenData)(ModelClass, BoundModelClass);

    BoundModelClass.knex(knex);
    knex.$$objection.boundModels[ModelClass.uniqueTag()] = BoundModelClass;

    var boundRelations = (0, _create2.default)(null);
    var relations = ModelClass.getRelations();
    var relNames = (0, _keys2.default)(relations);

    for (var i = 0, l = relNames.length; i < l; ++i) {
      var relName = relNames[i];
      var relation = relations[relName];
      boundRelations[relName] = relation.bindKnex(knex);
    }

    BoundModelClass.relations = boundRelations;
    return BoundModelClass;
  };

  /**
   * @param {knex} trx
   * @returns {Constructor.<Model>}
   */


  Model.bindTransaction = function bindTransaction(trx) {
    return this.bindKnex(trx);
  };

  /**
   * @param {Model|Object} model
   * @param {ModelOptions=} options
   * @returns {Model}
   */


  Model.ensureModel = function ensureModel(model, options) {
    var ModelClass = this;

    if (!model) {
      return null;
    }

    if (model instanceof ModelClass) {
      return model;
    } else {
      return ModelClass.fromJson(model, options);
    }
  };

  /**
   * @param {Array.<Model|Object>} input
   * @param {ModelOptions=} options
   * @returns {Array.<Model>}
   */


  Model.ensureModelArray = function ensureModelArray(input, options) {
    if (!input) {
      return [];
    }

    if (Array.isArray(input)) {
      var models = new Array(input.length);

      for (var i = 0, l = input.length; i < l; ++i) {
        models[i] = this.ensureModel(input[i], options);
      }

      return models;
    } else {
      return [this.ensureModel(input, options)];
    }
  };

  /**
   * @returns {Array.<string>}
   */


  Model.getIdColumnArray = function getIdColumnArray() {
    if (Array.isArray(this.idColumn)) {
      return this.idColumn;
    } else {
      return [this.idColumn];
    }
  };

  /**
   * @returns {string|Array.<string>}
   */


  Model.getFullIdColumn = function getFullIdColumn() {
    var _this4 = this;

    if (Array.isArray(this.idColumn)) {
      return this.idColumn.map(function (col) {
        return _this4.tableName + '.' + col;
      });
    } else {
      return this.tableName + '.' + this.idColumn;
    }
  };

  /**
   * @returns {Array.<string>}
   */


  Model.getIdPropertyArray = function getIdPropertyArray() {
    var _this5 = this;

    return this.getIdColumnArray().map(function (col) {
      return idColumnToIdProperty(_this5, col);
    });
  };

  /**
   * @returns {string|Array.<string>}
   */


  Model.getIdProperty = function getIdProperty() {
    var _this6 = this;

    if (Array.isArray(this.idColumn)) {
      return this.idColumn.map(function (col) {
        return idColumnToIdProperty(_this6, col);
      });
    } else {
      return idColumnToIdProperty(this, this.idColumn);
    }
  };

  /**
   * @private
   */


  /**
   * @return {Object.<string, Relation>}
   */
  Model.getRelations = function getRelations() {
    var _this7 = this;

    var relations = this.relations;

    if (!relations) {
      relations = _lodash2.default.reduce(this.relationMappings, function (relations, mapping, relationName) {
        relations[relationName] = new mapping.relation(relationName, _this7);
        relations[relationName].setMapping(mapping);
        return relations;
      }, (0, _create2.default)(null));

      this.relations = relations;
    }

    return relations;
  };

  /**
   * @return {Relation}
   */


  Model.getRelation = function getRelation(name) {
    var relation = this.getRelations()[name];

    if (!relation) {
      throw new Error('A model class (tableName = ' + this.tableName + ') doesn\'t have relation ' + name);
    }

    return relation;
  };

  /**
   * @param {Array.<Model|Object>} $models
   * @param {string|RelationExpression} expression
   * @param {Object.<string, function(QueryBuilder)>=} filters
   * @returns {QueryBuilder}
   */


  Model.loadRelated = function loadRelated($models, expression, filters) {
    return this.query().resolve(this.ensureModelArray($models)).findOptions({ dontCallAfterGet: true }).eager(expression, filters).runAfter(function (models) {
      return Array.isArray($models) ? models : models[0];
    });
  };

  /**
   * @param {Constructor.<Model>=} filterConstructor
   * @param {Model|Array.<Model>} models
   * @param {function(Model, Model, string)} traverser
   * @return {Model}
   */


  Model.traverse = function traverse(filterConstructor, models, traverser) {
    filterConstructor = filterConstructor || null;

    if (_lodash2.default.isUndefined(traverser)) {
      traverser = models;
      models = filterConstructor;
      filterConstructor = null;
    }

    if (!_lodash2.default.isFunction(traverser)) {
      throw new Error('traverser must be a function');
    }

    _traverse(models, null, null, filterConstructor, traverser);
    return this;
  };

  /**
   * @protected
   * @returns {Array.<string>}
   */


  Model.getJsonAttributes = function getJsonAttributes() {
    var _this8 = this;

    // If the jsonAttributes property is not set, try to create it based
    // on the jsonSchema. All properties that are objects or arrays must
    // be converted to JSON.
    if (!this.jsonAttributes && this.getJsonSchema()) {
      this.jsonAttributes = [];

      _lodash2.default.forOwn(this.getJsonSchema().properties, function (prop, propName) {
        var types = _lodash2.default.compact(ensureArray(prop.type));

        if (types.length === 0 && Array.isArray(prop.anyOf)) {
          types = _lodash2.default.flattenDeep(_lodash2.default.map(prop.anyOf, 'type'));
        }

        if (types.length === 0 && Array.isArray(prop.oneOf)) {
          types = _lodash2.default.flattenDeep(_lodash2.default.map(prop.oneOf, 'type'));
        }

        if (_lodash2.default.includes(types, 'object') || _lodash2.default.includes(types, 'array')) {
          _this8.jsonAttributes.push(propName);
        }
      });
    }

    if (!Array.isArray(this.jsonAttributes)) {
      this.jsonAttributes = [];
    }

    return this.jsonAttributes;
  };

  (0, _createClass3.default)(Model, null, [{
    key: 'OneToOneRelation',
    get: function get() {
      return _BelongsToOneRelation2.default;
    }
  }, {
    key: 'OneToManyRelation',
    get: function get() {
      return _HasManyRelation2.default;
    }

    /**
     * @type {string}
     */


    /**
     * @type {string|Array.<string>}
     */


    /**
     * @type {string}
     */


    /**
     * @type {string}
     */


    /**
     * @type {string}
     */


    /**
     * @type {RegExp}
     */


    /**
     * @type {Array.<string>}
     */


    /**
     * @type {Object.<string, RelationMapping>}
     */


    /**
     * @type {Array.<string>}
     */


    /**
     * @type {boolean}
     */


    /**
     * @type {Constructor.<? extends EagerOperation>}
     */


    /**
     * @type {object}
     */


    /**
     * @private
     */

  }, {
    key: 'relations',
    get: function get() {}

    /**
     * @private
     */
    ,
    set: function set(value) {}
  }]);
  return Model;
}(_ModelBase3.default), _class2.QueryBuilder = _QueryBuilder2.default, _class2.RelatedQueryBuilder = _QueryBuilder2.default, _class2.HasOneRelation = _HasOneRelation2.default, _class2.HasManyRelation = _HasManyRelation2.default, _class2.ManyToManyRelation = _ManyToManyRelation2.default, _class2.BelongsToOneRelation = _BelongsToOneRelation2.default, _class2.JoinEagerAlgorithm = JoinEagerAlgorithm, _class2.WhereInEagerAlgorithm = WhereInEagerAlgorithm, _class2.tableName = null, _class2.idColumn = 'id', _class2.uidProp = '#id', _class2.uidRefProp = '#ref', _class2.dbRefProp = '#dbRef', _class2.propRefRegex = /#ref{([^\.]+)\.([^}]+)}/g, _class2.jsonAttributes = null, _class2.relationMappings = null, _class2.modelPaths = [], _class2.pickJsonSchemaProperties = true, _class2.defaultEagerAlgorithm = WhereInEagerAlgorithm, _class2.defaultEagerOptions = null, _class2.$$knex = null, _temp), (_applyDecoratedDescriptor(_class, 'OneToOneRelation', [_dec], (0, _getOwnPropertyDescriptor2.default)(_class, 'OneToOneRelation'), _class), _applyDecoratedDescriptor(_class, 'OneToManyRelation', [_dec2], (0, _getOwnPropertyDescriptor2.default)(_class, 'OneToManyRelation'), _class), _applyDecoratedDescriptor(_class, 'getIdColumnArray', [_memoize2.default], (0, _getOwnPropertyDescriptor2.default)(_class, 'getIdColumnArray'), _class), _applyDecoratedDescriptor(_class, 'getFullIdColumn', [_memoize2.default], (0, _getOwnPropertyDescriptor2.default)(_class, 'getFullIdColumn'), _class), _applyDecoratedDescriptor(_class, 'getIdPropertyArray', [_memoize2.default], (0, _getOwnPropertyDescriptor2.default)(_class, 'getIdPropertyArray'), _class), _applyDecoratedDescriptor(_class, 'getIdProperty', [_memoize2.default], (0, _getOwnPropertyDescriptor2.default)(_class, 'getIdProperty'), _class), _applyDecoratedDescriptor(_class, 'relations', [_dec3], (0, _getOwnPropertyDescriptor2.default)(_class, 'relations'), _class), _applyDecoratedDescriptor(_class, 'relations', [_dec4], (0, _getOwnPropertyDescriptor2.default)(_class, 'relations'), _class)), _class));
exports.default = Model;


function ensureArray(obj) {
  if (Array.isArray(obj)) {
    return obj;
  } else {
    return [obj];
  }
}

function _traverse(models, parent, relationName, modelClass, callback) {
  if (!_lodash2.default.isObject(models)) {
    return;
  }

  if (Array.isArray(models)) {
    for (var i = 0, l = models.length; i < l; ++i) {
      traverseOne(models[i], parent, relationName, modelClass, callback);
    }
  } else {
    traverseOne(models, parent, relationName, modelClass, callback);
  }
}

function traverseOne(model, parent, relationName, modelClass, callback) {
  if (!(model instanceof Model)) {
    return;
  }

  if (!modelClass || model instanceof modelClass) {
    callback(model, parent, relationName);
  }

  var relations = model.constructor.getRelations();
  var relNames = (0, _keys2.default)(relations);

  for (var i = 0, l = relNames.length; i < l; ++i) {
    var relName = relNames[i];

    if (model.hasOwnProperty(relName)) {
      _traverse(model[relName], model, relName, modelClass, callback);
    }
  }
}

function idColumnToIdProperty(ModelClass, idColumn) {
  var idProperty = ModelClass.columnNameToPropertyName(idColumn);

  if (!idProperty) {
    throw new Error(ModelClass.tableName + '.$parseDatabaseJson probably changes the value of the id column `' + idColumn + '` which is a no-no.');
  }

  return idProperty;
}

function setId(model, id) {
  var idProp = model.constructor.getIdProperty();
  var isArray = Array.isArray(idProp);

  if (Array.isArray(id)) {
    if (isArray) {
      if (id.length !== idProp.length) {
        throw new Error('trying to set an invalid identifier for a model');
      }

      for (var i = 0; i < id.length; ++i) {
        model[idProp[i]] = id[i];
      }
    } else {
      if (id.length !== 1) {
        throw new Error('trying to set an invalid identifier for a model');
      }

      model[idProp] = id[0];
    }
  } else {
    if (isArray) {
      if (idProp.length > 1) {
        throw new Error('trying to set an invalid identifier for a model');
      }

      model[idProp[0]] = id;
    } else {
      model[idProp] = id;
    }
  }
}

function getId(model) {
  var idProp = model.constructor.getIdProperty();

  if (Array.isArray(idProp)) {
    return model.$values(idProp);
  } else {
    return model[idProp];
  }
}
//# sourceMappingURL=data:application/json;base64,